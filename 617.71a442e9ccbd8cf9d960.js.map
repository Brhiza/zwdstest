{"version":3,"file":"617.71a442e9ccbd8cf9d960.js","mappings":"oJAIA,MAAMA,GAAgB,IAAAC,MAAK,IAAM,+DAC3BC,GAAiB,IAAAD,MAAK,IAAM,8BAE5BE,EAAsB,IAAO,gBAAoB,MAAO,CAAEC,UAAW,yBACvE,gBAAoB,MAAO,KAAM,WAE/BC,EAAuB,IAAO,gBAAoB,MAAO,CAAED,UAAW,0BACxE,gBAAoB,EAAAE,SAAU,CAAEC,SAAU,gBAAoBJ,EAAqB,OAC/E,gBAAoBD,EAAgB,CAAEM,KAAM,OAAQC,SAAS,MA6BrE,EAAe,OAjBA,EAAGC,WAAUC,YAAWC,oBAAmBC,kBAAiB,EAAOC,cAAc,CAAEC,QAAS,OAAQC,QAAS,QAAUC,aAAY,MAC9I,MAAOC,EAAgBC,IAAqB,IAAAC,UAASH,GAWrD,OATA,IAAAI,WAAU,KACFJ,GAEAK,sBAAsB,KAClBH,GAAkB,MAG3B,CAACF,IAECA,EAGG,gBAAoB,EAAAX,SAAU,CAAEC,SAAU,gBAAoBF,EAAsB,OAASa,GAAmB,gBAAoBlB,EAAe,CAAEU,SAAUA,EAAUC,UAAWA,EAAWC,kBAAmBA,EAAmBC,eAAgBA,EAAgBC,YAAaA,EAAaG,UAAWA,KAFvS,M","sources":["webpack://react-iztro/./src/AIChat/AIChat.tsx"],"sourcesContent":["import React, { useState, useEffect, lazy, Suspense } from 'react';\nimport '../styles/chat/chat.css';\nimport '../styles/index.css';\n// 懒加载ChatContainer组件\nconst ChatContainer = lazy(() => import('./components/ChatContainer'));\nconst SkeletonLoader = lazy(() => import('./components/SkeletonLoader'));\n// 加载状态组件\nconst ChatLoadingFallback = () => (React.createElement(\"div\", { className: \"chat-loading-fallback\" },\n    React.createElement(\"div\", null, \"\\u52A0\\u8F7D\\u4E2D...\")));\n// 骨架屏加载组件\nconst ChatSkeletonFallback = () => (React.createElement(\"div\", { className: \"chat-skeleton-fallback\" },\n    React.createElement(Suspense, { fallback: React.createElement(ChatLoadingFallback, null) },\n        React.createElement(SkeletonLoader, { type: \"chat\", animate: true }))));\n/**\n * AI 聊天组件 - 优化版本\n *\n * 这个组件现在是一个轻量级的容器组件，主要职责是：\n * 1. 接收 props 并传递给 ChatContainer\n * 2. 提供清晰的组件接口\n * 3. 保持与原有 API 的兼容性\n * 4. 实现懒加载，提高初始加载性能\n *\n * 所有的业务逻辑和状态管理都已经移到 ChatContainer 和相关的 Hooks 中\n */\nconst AIChat = ({ formData, astrolabe, synastryAstrolabe, isSynastryMode = false, personNames = { person1: \"第一个人\", person2: \"第二个人\" }, isVisible = true, }) => {\n    const [shouldLoadChat, setShouldLoadChat] = useState(isVisible);\n    // 当组件变为可见时，延迟加载聊天组件\n    useEffect(() => {\n        if (isVisible) {\n            // 使用requestAnimationFrame确保在下一帧加载，避免阻塞主线程\n            requestAnimationFrame(() => {\n                setShouldLoadChat(true);\n            });\n        }\n    }, [isVisible]);\n    // 如果组件不可见，不渲染任何内容\n    if (!isVisible) {\n        return null;\n    }\n    return (React.createElement(Suspense, { fallback: React.createElement(ChatSkeletonFallback, null) }, shouldLoadChat && (React.createElement(ChatContainer, { formData: formData, astrolabe: astrolabe, synastryAstrolabe: synastryAstrolabe, isSynastryMode: isSynastryMode, personNames: personNames, isVisible: isVisible }))));\n};\nexport default React.memo(AIChat);\n"],"names":["ChatContainer","lazy","SkeletonLoader","ChatLoadingFallback","className","ChatSkeletonFallback","Suspense","fallback","type","animate","formData","astrolabe","synastryAstrolabe","isSynastryMode","personNames","person1","person2","isVisible","shouldLoadChat","setShouldLoadChat","useState","useEffect","requestAnimationFrame"],"sourceRoot":""}