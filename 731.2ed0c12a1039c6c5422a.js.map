{"version":3,"file":"731.2ed0c12a1039c6c5422a.js","mappings":"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","sources":["webpack://react-iztro/./src/AIChat/components/SkeletonLoader.tsx","webpack://react-iztro/./src/AIChat/hooks/useMessageScroll.ts","webpack://react-iztro/./src/AIChat/utils/layoutUtils.ts","webpack://react-iztro/./src/AIChat/hooks/useVirtualKeyboard.ts","webpack://react-iztro/./src/utils/astrolabeFormatter.ts","webpack://react-iztro/./src/AIChat/utils/messageUtils.ts","webpack://react-iztro/./src/AIChat/hooks/useNetworkRequest.ts","webpack://react-iztro/./src/AIChat/hooks/useAIChatService.ts","webpack://react-iztro/./src/AIChat/hooks/useChatLayout.ts","webpack://react-iztro/./src/utils/markdownFormatter.tsx","webpack://react-iztro/./src/AIChat/components/MessageItem.tsx","webpack://react-iztro/./src/AIChat/components/TypingIndicator.tsx","webpack://react-iztro/./src/AIChat/hooks/useMessageStorage.ts","webpack://react-iztro/./src/AIChat/components/MessageList.tsx","webpack://react-iztro/./src/AIChat/hooks/useVirtualScroll.ts","webpack://react-iztro/./src/AIChat/components/ChatInput.tsx","webpack://react-iztro/./src/AIChat/components/ModelSelector.tsx","webpack://react-iztro/./src/AIChat/components/QuickActions.tsx","webpack://react-iztro/./src/AIChat/components/QuestionPanel.tsx","webpack://react-iztro/./src/AIChat/components/ScrollToBottomButton.tsx","webpack://react-iztro/./src/AIChat/components/ChatContainer.tsx"],"sourcesContent":["import React from 'react';\n/**\n * 骨架屏加载组件\n * 提供多种类型的骨架屏加载效果，改善用户体验\n */\nconst SkeletonLoader = ({ type = 'message', count = 1, animate = true, }) => {\n    const renderMessageSkeleton = () => (React.createElement(\"div\", { className: \"skeleton-message\" },\n        React.createElement(\"div\", { className: \"skeleton-avatar\" }),\n        React.createElement(\"div\", { className: \"skeleton-content\" },\n            React.createElement(\"div\", { className: \"skeleton-line skeleton-short\" }),\n            React.createElement(\"div\", { className: \"skeleton-line\" }),\n            React.createElement(\"div\", { className: \"skeleton-line skeleton-long\" }))));\n    const renderChatSkeleton = () => (React.createElement(\"div\", { className: \"skeleton-chat\" },\n        React.createElement(\"div\", { className: \"skeleton-header\" },\n            React.createElement(\"div\", { className: \"skeleton-title\" }),\n            React.createElement(\"div\", { className: \"skeleton-subtitle\" })),\n        React.createElement(\"div\", { className: \"skeleton-messages\" }, Array.from({ length: 3 }).map((_, index) => (React.createElement(\"div\", { key: index, className: \"skeleton-message-wrapper\" },\n            React.createElement(\"div\", { className: \"skeleton-message-avatar\" }),\n            React.createElement(\"div\", { className: \"skeleton-message-content\" },\n                React.createElement(\"div\", { className: \"skeleton-message-line\" }),\n                React.createElement(\"div\", { className: \"skeleton-message-line skeleton-short\" })))))),\n        React.createElement(\"div\", { className: \"skeleton-input\" },\n            React.createElement(\"div\", { className: \"skeleton-input-field\" }),\n            React.createElement(\"div\", { className: \"skeleton-input-button\" }))));\n    const renderInputSkeleton = () => (React.createElement(\"div\", { className: \"skeleton-input-container\" },\n        React.createElement(\"div\", { className: \"skeleton-input-field\" }),\n        React.createElement(\"div\", { className: \"skeleton-input-button\" })));\n    const renderSkeletons = () => {\n        const skeletons = [];\n        for (let i = 0; i < count; i++) {\n            switch (type) {\n                case 'message':\n                    skeletons.push(React.createElement(\"div\", { key: i }, renderMessageSkeleton()));\n                    break;\n                case 'chat':\n                    skeletons.push(React.createElement(\"div\", { key: i }, renderChatSkeleton()));\n                    break;\n                case 'input':\n                    skeletons.push(React.createElement(\"div\", { key: i }, renderInputSkeleton()));\n                    break;\n                default:\n                    skeletons.push(React.createElement(\"div\", { key: i }, renderMessageSkeleton()));\n            }\n        }\n        return skeletons;\n    };\n    return (React.createElement(\"div\", { className: `skeleton-loader ${animate ? 'skeleton-animate' : ''}` }, renderSkeletons()));\n};\nexport default SkeletonLoader;\n","import { useState, useEffect, useRef, useCallback } from 'react';\n/**\n * 消息滚动处理 Hook\n * 提供自动滚动和用户滚动检测功能\n */\nexport const useMessageScroll = (messages, isVisible, isStreaming = false) => {\n    const [userScrolledUp, setUserScrolledUp] = useState(false);\n    const [isUserActivelyScrolling, setIsUserActivelyScrolling] = useState(false);\n    const messagesContainerRef = useRef(null);\n    const lastMessageRef = useRef(null);\n    const observerRef = useRef(null);\n    const scrollTimeoutRef = useRef(null);\n    const userScrollTimeoutRef = useRef(null);\n    // 检查是否滚动到底部\n    const isAtBottom = useCallback(() => {\n        const container = messagesContainerRef.current;\n        if (!container)\n            return true;\n        const { scrollTop, scrollHeight, clientHeight } = container;\n        const threshold = 100; // 100px 的阈值\n        return scrollHeight - scrollTop <= clientHeight + threshold;\n    }, []);\n    // 滚动到底部\n    const scrollToBottom = useCallback((force = false) => {\n        if (!isVisible)\n            return;\n        // 如果用户正在主动滚动或者向上滚动了且不是强制滚动，则不自动滚动\n        if ((isUserActivelyScrolling || userScrolledUp) && !force)\n            return;\n        const container = messagesContainerRef.current;\n        if (!container)\n            return;\n        // 使用 requestAnimationFrame 优化滚动性能\n        requestAnimationFrame(() => {\n            // 强制滚动到绝对底部，确保完全可见\n            container.scrollTo({\n                top: container.scrollHeight,\n                behavior: force ? 'auto' : 'smooth',\n            });\n            // 如果是强制滚动，再次确保滚动到底部（处理移动端可能的延迟）\n            if (force) {\n                setTimeout(() => {\n                    container.scrollTo({\n                        top: container.scrollHeight,\n                        behavior: 'auto',\n                    });\n                }, 50);\n            }\n        });\n    }, [isVisible, userScrolledUp, isUserActivelyScrolling]);\n    // 处理滚动事件 - 优化性能，减少状态更新频率\n    const handleScroll = useCallback(() => {\n        // 清除之前的超时\n        if (scrollTimeoutRef.current) {\n            clearTimeout(scrollTimeoutRef.current);\n        }\n        // 清除用户滚动状态的超时\n        if (userScrollTimeoutRef.current) {\n            clearTimeout(userScrollTimeoutRef.current);\n        }\n        // 标记用户正在主动滚动\n        setIsUserActivelyScrolling(true);\n        // 防抖处理滚动事件 - 增加延迟时间，减少频繁更新\n        scrollTimeoutRef.current = setTimeout(() => {\n            const atBottom = isAtBottom();\n            setUserScrolledUp(!atBottom);\n            // 如果用户停止滚动一段时间后，重置主动滚动状态 - 增加延迟时间\n            userScrollTimeoutRef.current = setTimeout(() => {\n                setIsUserActivelyScrolling(false);\n            }, 1500); // 增加到1.5秒\n        }, 150); // 增加到150ms\n    }, [isAtBottom]);\n    // 设置 Intersection Observer 监听最后一条消息\n    useEffect(() => {\n        if (!isVisible)\n            return;\n        observerRef.current = new IntersectionObserver(([entry]) => {\n            // 如果最后一条消息可见，说明用户在底部\n            if (entry.isIntersecting) {\n                setUserScrolledUp(false);\n                setIsUserActivelyScrolling(false);\n            }\n        }, {\n            root: messagesContainerRef.current,\n            threshold: 0.1,\n        });\n        if (lastMessageRef.current) {\n            observerRef.current.observe(lastMessageRef.current);\n        }\n        return () => {\n            if (observerRef.current) {\n                observerRef.current.disconnect();\n            }\n        };\n    }, [isVisible, messages.length]);\n    // 监听消息容器滚动 - 优化性能\n    useEffect(() => {\n        const container = messagesContainerRef.current;\n        if (!container || !isVisible)\n            return;\n        // 使用被动事件监听器提高滚动性能\n        container.addEventListener('scroll', handleScroll, { passive: true });\n        return () => {\n            container.removeEventListener('scroll', handleScroll);\n            if (scrollTimeoutRef.current) {\n                clearTimeout(scrollTimeoutRef.current);\n            }\n            if (userScrollTimeoutRef.current) {\n                clearTimeout(userScrollTimeoutRef.current);\n            }\n        };\n    }, [isVisible, handleScroll]);\n    // 当消息变化时，自动滚动到底部\n    useEffect(() => {\n        if (messages.length === 0)\n            return;\n        // 如果是用户发送的消息，强制滚动到底部\n        const lastMessage = messages[messages.length - 1];\n        if (lastMessage.role === 'user') {\n            setUserScrolledUp(false);\n            setIsUserActivelyScrolling(false);\n            // 延迟滚动确保 DOM 更新完成\n            setTimeout(() => scrollToBottom(true), 100);\n        }\n        else if (!userScrolledUp && !isUserActivelyScrolling) {\n            // 如果是 AI 回复且用户没有向上滚动且没有主动滚动，自动滚动\n            scrollToBottom();\n        }\n    }, [messages, userScrolledUp, isUserActivelyScrolling, scrollToBottom]);\n    // 当组件显示/隐藏时处理滚动\n    useEffect(() => {\n        if (isVisible && !userScrolledUp && !isUserActivelyScrolling) {\n            scrollToBottom();\n        }\n    }, [isVisible, userScrolledUp, isUserActivelyScrolling, scrollToBottom]);\n    // 当流式传输状态变化时，重置用户滚动状态\n    useEffect(() => {\n        if (!isStreaming) {\n            setIsUserActivelyScrolling(false);\n        }\n    }, [isStreaming]);\n    // 重置滚动状态\n    const resetScrollState = useCallback(() => {\n        setUserScrolledUp(false);\n        setIsUserActivelyScrolling(false);\n        scrollToBottom(true);\n    }, [scrollToBottom]);\n    return {\n        messagesContainerRef,\n        lastMessageRef,\n        userScrolledUp,\n        setUserScrolledUp,\n        scrollToBottom,\n        resetScrollState,\n    };\n};\n","/**\n * 检测是否为移动设备\n */\nexport const isMobileDevice = () => {\n    return /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n};\n/**\n * 检测是否为安卓设备\n */\nexport const isAndroidDevice = () => {\n    return /Android/i.test(navigator.userAgent);\n};\n/**\n * 检测安卓设备上的小白条（导航手势区域）\n * 返回小白条的估计高度（像素）\n */\nexport const getAndroidNavigationBarHeight = () => {\n    if (!isAndroidDevice())\n        return 0;\n    // 方法1：通过CSS env()变量获取\n    const safeAreaBottom = getSafeAreaInset('bottom');\n    // 方法2：通过屏幕和窗口高度差计算\n    const screenHeight = window.screen.height;\n    const windowHeight = window.innerHeight;\n    const viewportHeight = window.visualViewport?.height || windowHeight;\n    // 如果窗口高度小于屏幕高度，可能存在导航栏\n    const heightDiff = screenHeight - windowHeight;\n    // 方法3：通过window.innerWidth和screen.width判断是否有导航栏\n    const screenWidth = window.screen.width;\n    const windowWidth = window.innerWidth;\n    const widthDiff = Math.abs(screenWidth - windowWidth);\n    // 综合判断：如果安全区域底部大于0，或者高度差大于0，或者宽度差大于0\n    // 则认为存在导航栏，返回估计的高度\n    if (safeAreaBottom > 0) {\n        return safeAreaBottom;\n    }\n    // 安卓导航栏通常在24-48px之间\n    if (heightDiff > 0 && heightDiff <= 100) {\n        return heightDiff;\n    }\n    // 如果高度差太大，可能是键盘弹出，不计算为导航栏\n    if (heightDiff > 100) {\n        return 0;\n    }\n    // 默认安卓导航栏高度\n    return widthDiff > 0 ? 48 : 0;\n};\n/**\n * 获取设备布局配置\n */\nexport const getLayoutConfig = () => {\n    const isMobile = isMobileDevice();\n    return {\n        isMobile,\n        headerHeight: isMobile ? 60 : 0,\n        keyboardHeight: 0,\n        safeAreaTop: getSafeAreaInset('top'),\n        safeAreaBottom: getSafeAreaInset('bottom'),\n    };\n};\n/**\n * 获取安全区域插入值\n */\nexport const getSafeAreaInset = (position) => {\n    if (typeof CSS !== 'undefined' && CSS.supports && CSS.supports('env', 'safe-area-inset-top')) {\n        const value = getComputedStyle(document.documentElement)\n            .getPropertyValue(`env(safe-area-inset-${position})`);\n        return parseInt(value) || 0;\n    }\n    return 0;\n};\n/**\n * 计算可用高度\n */\nexport const calculateAvailableHeight = (config) => {\n    const viewportHeight = window.visualViewport?.height || window.innerHeight;\n    return viewportHeight - config.headerHeight - config.safeAreaTop - config.safeAreaBottom;\n};\n/**\n * 检测虚拟键盘是否可见\n */\nexport const isKeyboardVisible = (config) => {\n    if (!config.isMobile)\n        return false;\n    const viewportHeight = window.visualViewport?.height || window.innerHeight;\n    const windowHeight = window.innerHeight;\n    // 如果视口高度明显小于窗口高度，说明键盘可能弹出了\n    return viewportHeight < windowHeight * 0.75;\n};\n/**\n * 获取虚拟键盘高度\n */\nexport const getKeyboardHeight = (config) => {\n    if (!isKeyboardVisible(config))\n        return 0;\n    const viewportHeight = window.visualViewport?.height || window.innerHeight;\n    const windowHeight = window.innerHeight;\n    return windowHeight - viewportHeight;\n};\n/**\n * 更新 CSS 变量以响应布局变化\n */\nexport const updateLayoutCSSVariables = (config) => {\n    const root = document.documentElement;\n    root.style.setProperty('--keyboard-height', `${config.keyboardHeight}px`);\n    root.style.setProperty('--safe-area-top', `${config.safeAreaTop}px`);\n    root.style.setProperty('--safe-area-bottom', `${config.safeAreaBottom}px`);\n    root.style.setProperty('--header-height', `${config.headerHeight}px`);\n};\n/**\n * 创建响应式布局观察器\n */\nexport const createLayoutObserver = (onLayoutChange) => {\n    return new ResizeObserver(() => {\n        const config = getLayoutConfig();\n        config.keyboardHeight = getKeyboardHeight(config);\n        updateLayoutCSSVariables(config);\n        onLayoutChange(config);\n    });\n};\n/**\n * 防抖函数\n */\nexport const debounce = (func, delay) => {\n    let timeoutId;\n    return ((...args) => {\n        clearTimeout(timeoutId);\n        timeoutId = setTimeout(() => func.apply(null, args), delay);\n    });\n};\n/**\n * 节流函数\n */\nexport const throttle = (func, delay) => {\n    let lastCall = 0;\n    return ((...args) => {\n        const now = Date.now();\n        if (now - lastCall >= delay) {\n            lastCall = now;\n            func.apply(null, args);\n        }\n    });\n};\n","import { useState, useEffect, useCallback, useRef } from 'react';\nimport { isMobileDevice, isAndroidDevice, getAndroidNavigationBarHeight, getKeyboardHeight, debounce, throttle } from '../utils/layoutUtils';\n/**\n * 虚拟键盘处理 Hook\n * 提供虚拟键盘状态检测和处理功能\n */\nexport const useVirtualKeyboard = () => {\n    const [keyboardState, setKeyboardState] = useState({\n        isVisible: false,\n        height: 0,\n    });\n    const isMobile = useRef(isMobileDevice());\n    const isAndroid = useRef(isAndroidDevice());\n    const navigationBarHeight = useRef(getAndroidNavigationBarHeight());\n    const observerRef = useRef(null);\n    // 更新键盘状态\n    const updateKeyboardState = useCallback((config) => {\n        const isVisible = config.keyboardHeight > 0;\n        setKeyboardState(prev => {\n            // 只有状态真正改变时才更新\n            if (prev.isVisible !== isVisible || prev.height !== config.keyboardHeight) {\n                return {\n                    isVisible,\n                    height: config.keyboardHeight,\n                };\n            }\n            return prev;\n        });\n        // 更新 CSS 变量\n        document.documentElement.style.setProperty('--keyboard-height', `${config.keyboardHeight}px`);\n        // 更新安卓导航栏高度变量\n        if (isAndroid.current) {\n            const navHeight = getAndroidNavigationBarHeight();\n            navigationBarHeight.current = navHeight;\n            document.documentElement.style.setProperty('--android-navigation-bar-height', `${navHeight}px`);\n        }\n    }, []);\n    // 处理视口大小变化 - 优化性能，减少计算频率\n    const handleViewportResize = useCallback(throttle(() => {\n        if (!isMobile.current)\n            return;\n        // 获取安全区域值 - 缓存计算结果\n        const safeAreaTop = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--safe-area-inset-top')) || 0;\n        const safeAreaBottom = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--safe-area-inset-bottom')) || 0;\n        let keyboardHeight = 0;\n        if (isAndroid.current) {\n            // 安卓设备特殊处理\n            const viewportHeight = window.visualViewport?.height || window.innerHeight;\n            const screenHeight = window.screen.height;\n            const windowHeight = window.innerHeight;\n            const navBarHeight = getAndroidNavigationBarHeight();\n            // 计算键盘高度，减去导航栏高度\n            if (viewportHeight < windowHeight * 0.8) {\n                keyboardHeight = windowHeight - viewportHeight - navBarHeight;\n            }\n            // 确保键盘高度合理，且不为负数\n            keyboardHeight = Math.max(0, Math.min(keyboardHeight, screenHeight * 0.5));\n        }\n        else {\n            // iOS和其他设备使用原有逻辑\n            keyboardHeight = getKeyboardHeight({\n                isMobile: true,\n                headerHeight: 60,\n                keyboardHeight: 0,\n                safeAreaTop,\n                safeAreaBottom,\n            });\n        }\n        updateKeyboardState({ keyboardHeight });\n    }, 200), [updateKeyboardState]); // 增加节流时间到200ms，减少计算频率\n    // 处理输入框焦点事件\n    const handleInputFocus = useCallback(() => {\n        if (!isMobile.current)\n            return;\n        // 延迟检测，确保键盘完全弹出\n        setTimeout(handleViewportResize, 300);\n    }, [handleViewportResize]);\n    const handleInputBlur = useCallback(() => {\n        if (!isMobile.current)\n            return;\n        // 延迟检测，确保键盘完全收起\n        setTimeout(() => {\n            updateKeyboardState({ keyboardHeight: 0 });\n        }, 100);\n    }, [updateKeyboardState]);\n    // 设置输入框事件监听\n    const setupInputListeners = useCallback((inputElement) => {\n        if (!inputElement || !isMobile.current)\n            return;\n        inputElement.addEventListener('focus', handleInputFocus);\n        inputElement.addEventListener('blur', handleInputBlur);\n        return () => {\n            inputElement.removeEventListener('focus', handleInputFocus);\n            inputElement.removeEventListener('blur', handleInputBlur);\n        };\n    }, [handleInputFocus, handleInputBlur]);\n    // 初始化监听器 - 优化性能，减少事件监听器数量\n    useEffect(() => {\n        if (!isMobile.current)\n            return;\n        // 监听视口大小变化 - 优先使用visualViewport\n        if (window.visualViewport) {\n            window.visualViewport.addEventListener('resize', handleViewportResize);\n        }\n        else {\n            // 如果不支持visualViewport，则使用window.resize\n            window.addEventListener('resize', handleViewportResize);\n        }\n        // 创建 ResizeObserver 监听根元素变化 - 增加防抖延迟\n        observerRef.current = new ResizeObserver(debounce(handleViewportResize, 200) // 增加到200ms\n        );\n        observerRef.current.observe(document.documentElement);\n        // 初始检测\n        handleViewportResize();\n        return () => {\n            // 清理监听器\n            if (window.visualViewport) {\n                window.visualViewport.removeEventListener('resize', handleViewportResize);\n            }\n            else {\n                window.removeEventListener('resize', handleViewportResize);\n            }\n            if (observerRef.current) {\n                observerRef.current.disconnect();\n            }\n        };\n    }, [handleViewportResize]);\n    // 添加键盘状态变化的 body 类\n    useEffect(() => {\n        if (keyboardState.isVisible) {\n            document.body.classList.add('keyboard-visible');\n        }\n        else {\n            document.body.classList.remove('keyboard-visible');\n        }\n    }, [keyboardState.isVisible]);\n    // 添加安卓设备检测类\n    useEffect(() => {\n        if (isAndroid.current) {\n            document.body.classList.add('android-device');\n            // 初始化安卓导航栏高度变量\n            const navHeight = getAndroidNavigationBarHeight();\n            navigationBarHeight.current = navHeight;\n            document.documentElement.style.setProperty('--android-navigation-bar-height', `${navHeight}px`);\n        }\n        else {\n            document.body.classList.remove('android-device');\n        }\n    }, []);\n    return {\n        keyboardState,\n        setupInputListeners,\n        hideKeyboard: () => updateKeyboardState({ keyboardHeight: 0 }),\n    };\n};\n","/**\n * 格式化星耀数据为可读字符串\n * @param stars 星耀数组\n * @returns 格式化后的星耀字符串\n */\nconst formatStars = (stars) => {\n    if (!stars || stars.length === 0)\n        return '无';\n    return stars.join('、');\n};\n/**\n * 格式化宫位数据为可读字符串\n * @param palace 宫位数据\n * @returns 格式化后的宫位信息字符串\n */\nconst formatPalace = (palace) => {\n    const majorStars = palace.majorStars?.map(star => star.name) || [];\n    const minorStars = palace.minorStars?.map(star => star.name) || [];\n    const adjectiveStars = palace.adjectiveStars?.map(star => star.name) || [];\n    return `\n宫位：${palace.name}\n天干地支：${palace.heavenlyStem}${palace.earthlyBranch}\n主星：${formatStars(majorStars)}\n辅星：${formatStars(minorStars)}\n杂耀：${formatStars(adjectiveStars)}\n长生12神：${palace.changsheng12 || '无'}\n博士12神：${palace.boshi12 || '无'}\n将前12神：${palace.jiangqian12 || '无'}\n岁前12神：${palace.suiqian12 || '无'}\n大限：${palace.decadal?.range?.[0]}-${palace.decadal?.range?.[1]}岁\n小限：${palace.ages?.join('、') || '无'}\n${palace.isBodyPalace ? '【身宫】' : ''}\n${palace.isOriginalPalace ? '【来因宫】' : ''}\n  `.trim();\n};\n/**\n * 将星盘数据格式化为AI可理解的文本格式\n * @param astrolabe 星盘数据\n * @param currentTime 当前时间\n * @returns 格式化后的星盘信息文本\n */\nexport const formatAstrolabeForAI = (astrolabe, currentTime = new Date(), gender) => {\n    if (!astrolabe) {\n        return '暂无星盘数据';\n    }\n    const formattedTime = currentTime.toLocaleString('zh-CN', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        hour12: false\n    });\n    let result = `\n=== 紫微斗数星盘数据 ===\n当前时间：${formattedTime}\n\n基本信息：\n性别：${gender}\n阳历日期：${astrolabe.solarDate}\n农历日期：${astrolabe.lunarDate}\n干支纪年：${astrolabe.chineseDate}\n出生时辰：${astrolabe.time}（${astrolabe.timeRange}）\n星座：${astrolabe.sign}\n生肖：${astrolabe.zodiac}\n命宫地支：${astrolabe.earthlyBranchOfSoulPalace}\n身宫地支：${astrolabe.earthlyBranchOfBodyPalace}\n命主：${astrolabe.soul}\n身主：${astrolabe.body}\n五行局：${astrolabe.fiveElementsClass}\n\n十二宫位详情：\n`;\n    // 添加十二宫位信息\n    if (astrolabe.palaces && astrolabe.palaces.length > 0) {\n        astrolabe.palaces.forEach((palace, index) => {\n            result += `\\n--- 第${index + 1}宫 ---\\n`;\n            result += formatPalace(palace);\n            result += '\\n\\n';\n        });\n    }\n    // 添加当前运限信息\n    if (astrolabe.horoscope) {\n        const horoscope = astrolabe.horoscope();\n        if (horoscope) {\n            result += `\n=== 当前运限信息 ===\n查询日期：${horoscope.solarDate}\n农历日期：${horoscope.lunarDate}\n\n大限：\n天干地支：${horoscope.decadal.heavenlyStem}${horoscope.decadal.earthlyBranch}\n四化星：${formatStars(horoscope.decadal.mutagen || [])}\n\n小限：\n虚岁：${horoscope.age.nominalAge}\n天干地支：${horoscope.age.heavenlyStem}${horoscope.age.earthlyBranch}\n\n流年：\n天干地支：${horoscope.yearly.heavenlyStem}${horoscope.yearly.earthlyBranch}\n四化星：${formatStars(horoscope.yearly.mutagen || [])}\n\n流月：\n天干地支：${horoscope.monthly.heavenlyStem}${horoscope.monthly.earthlyBranch}\n\n流日：\n天干地支：${horoscope.daily.heavenlyStem}${horoscope.daily.earthlyBranch}\n\n流时：\n天干地支：${horoscope.hourly.heavenlyStem}${horoscope.hourly.earthlyBranch}\n`;\n        }\n    }\n    return result.trim();\n};\n","import { formatAstrolabeForAI } from \"../../utils/astrolabeFormatter\";\n/**\n * 格式化星盘数据为AI可理解的格式（合盘模式专用）\n */\nexport const formatAstrolabeForSynastry = (astrolabe, currentTime = new Date(), gender) => {\n    if (!astrolabe) {\n        return '暂无星盘数据';\n    }\n    const formattedTime = currentTime.toLocaleString('zh-CN', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        hour12: false\n    });\n    // 精简版只包含最关键的信息\n    let result = `\n=== 紫微斗数星盘数据（精简版）===\n当前时间：${formattedTime}\n\n基本信息：\n性别：${gender === 'male' ? '男' : '女'}\n阳历日期：${astrolabe.solarDate}\n干支纪年：${astrolabe.chineseDate}\n出生时辰：${astrolabe.time}\n命宫地支：${astrolabe.earthlyBranchOfSoulPalace}\n身宫地支：${astrolabe.earthlyBranchOfBodyPalace}\n命主：${astrolabe.soul}\n身主：${astrolabe.body}\n五行局：${astrolabe.fiveElementsClass}\n\n关键宫位信息：\n`;\n    // 只添加关键宫位信息（命宫、身宫、夫妻宫、事业宫、财帛宫）\n    const keyPalaces = ['命宫', '身宫', '夫妻宫', '事业宫', '财帛宫'];\n    if (astrolabe.palaces && astrolabe.palaces.length > 0) {\n        astrolabe.palaces.forEach((palace) => {\n            if (keyPalaces.includes(palace.name)) {\n                const majorStars = palace.majorStars?.map(star => star.name) || [];\n                const minorStars = palace.minorStars?.map(star => star.name) || [];\n                result += `\n${palace.name}：\n天干地支：${palace.heavenlyStem}${palace.earthlyBranch}\n主星：${majorStars.join('、') || '无'}\n辅星：${minorStars.join('、') || '无'}\n`;\n            }\n        });\n    }\n    // 添加简化的大限和流年信息\n    if (astrolabe.horoscope) {\n        const horoscope = astrolabe.horoscope();\n        if (horoscope) {\n            result += `\n当前运限：\n大限：${horoscope.decadal.heavenlyStem}${horoscope.decadal.earthlyBranch}\n流年：${horoscope.yearly.heavenlyStem}${horoscope.yearly.earthlyBranch}\n`;\n        }\n    }\n    return result.trim();\n};\n/**\n * 构建AI系统提示\n */\nexport const buildSystemPrompt = (formData, astrolabe, synastryAstrolabe, isSynastryMode, personNames, synastryData) => {\n    const currentTime = new Date();\n    const basePrompt = `你是一位精通古法传承与现代应用的紫微斗数宗师。你的论断不仅基于星盘数据，更融入了深刻的人生智慧。请牢记以下心法：\n1. **天人合一**：星盘是人生命运的蓝图，但人的意志和后天努力同样重要。你的解读应充满智慧和慈悲，旨在帮助问询者“知命而用命”，而非宿命论。\n2. **言必有据**：所有的论断都必须严格依据所提供的星盘数据，结合宫、星、四化进行严谨的逻辑推演。\n3. **结构清晰**：回答应有章法，先有“总论”概括全局，再“分项”详述，最后必须落脚于“建议”，为问询者提供具体、可行的趋吉避凶之道。\n4. **口吻沉稳**：以一位学识渊博、洞察世事的长者口吻进行叙述，语言简练、沉稳、富有哲理。\n\n`;\n    if (isSynastryMode && synastryAstrolabe) {\n        // 合盘模式下的系统提示\n        const person1Gender = synastryData?.person1?.gender || 'male';\n        const person2Gender = synastryData?.person2?.gender || 'female';\n        const synastryDataFormatted = formatAstrolabeForSynastry(synastryAstrolabe, currentTime, person2Gender);\n        const person1Data = formatAstrolabeForSynastry(astrolabe, currentTime, person1Gender);\n        return basePrompt + `现在，请根据以下两个人的星盘数据，为他们进行专业的“合盘”论断。\n\n第一个人（${personNames.person1}）的星盘数据：\n${person1Data}\n\n第二个人（${personNames.person2}）的星盘数据：\n${synastryDataFormatted}\n\n请运用你的全部学识，特别是“宫位互叠”与“飞星四化”等高级技法，深度剖析二人的缘分本质、互动模式与潜在的共业。你的分析需直指核心，点明关系中的关键，并提供维系与发展的智慧建议。`;\n    }\n    else {\n        // 单人模式下的系统提示\n        const gender = formData?.gender === 'male' ? '男' : '女';\n        const astrolabeData = astrolabe ? formatAstrolabeForAI(astrolabe, currentTime, gender) : '暂无星盘数据';\n        return basePrompt + `现在，请根据以下用户的星盘数据和当前时间，结合他/她的问题，进行专业的“命盘”解读。\n\n${astrolabeData}\n\n请运用你的全部学识，洞察星盘背后的天机，为问询者指点迷津。`;\n    }\n};\n/**\n * 构建发送给AI的消息数组\n */\nexport const buildAIMessages = (systemPrompt, existingMessages, userMessage) => {\n    return [\n        { role: \"system\", content: systemPrompt },\n        ...existingMessages,\n        { role: userMessage.role, content: userMessage.content }\n    ];\n};\n/**\n * 处理流式响应数据\n */\nexport const processStreamChunk = (chunk, buffer, onMessageUpdate) => {\n    let assistantMessage = \"\";\n    let newBuffer = buffer + chunk;\n    // 按行分割，但保留可能的截断行\n    const lines = newBuffer.split(\"\\n\");\n    newBuffer = lines.pop() || \"\"; // 保留最后一个可能不完整的行\n    for (const line of lines) {\n        if (line.startsWith(\"data: \")) {\n            const data = line.slice(6).trim();\n            if (data === \"[DONE]\") {\n                continue;\n            }\n            // 跳过空数据\n            if (!data) {\n                continue;\n            }\n            try {\n                // 检查 JSON 数据是否完整\n                if (data.startsWith('{') && data.endsWith('}')) {\n                    const parsed = JSON.parse(data);\n                    if (parsed.choices && parsed.choices[0].delta && parsed.choices[0].delta.content) {\n                        const newContent = parsed.choices[0].delta.content;\n                        assistantMessage += newContent;\n                        // 立即通知更新新增的内容\n                        onMessageUpdate(newContent);\n                    }\n                }\n            }\n            catch (e) {\n                console.error(\"解析 SSE 数据时出错:\", e);\n                console.error(\"问题数据:\", data);\n            }\n        }\n    }\n    return { newBuffer, assistantMessage };\n};\n/**\n * 处理缓冲区中剩余的数据\n */\nexport const processRemainingBuffer = (buffer, onMessageUpdate) => {\n    let assistantMessage = \"\";\n    if (buffer.trim()) {\n        const lines = buffer.split(\"\\n\");\n        let newBuffer = \"\";\n        for (const line of lines) {\n            if (line.startsWith(\"data: \")) {\n                const data = line.slice(6).trim();\n                if (data && data !== \"[DONE]\") {\n                    try {\n                        if (data.startsWith('{') && data.endsWith('}')) {\n                            const parsed = JSON.parse(data);\n                            if (parsed.choices && parsed.choices[0].delta && parsed.choices[0].delta.content) {\n                                const newContent = parsed.choices[0].delta.content;\n                                assistantMessage += newContent;\n                                // 立即通知更新新增的内容\n                                onMessageUpdate(newContent);\n                            }\n                        }\n                    }\n                    catch (e) {\n                        console.error(\"解析缓冲区 SSE 数据时出错:\", e);\n                        console.error(\"问题数据:\", data);\n                    }\n                }\n            }\n        }\n        return newBuffer;\n    }\n    return buffer;\n};\n/**\n * 创建错误消息\n */\nexport const createErrorMessage = (error) => {\n    console.error(\"AI 服务错误:\", error);\n    return {\n        role: \"assistant\",\n        content: \"抱歉，我在处理您的消息时遇到了问题。请稍后再试。\",\n    };\n};\n/**\n * 验证消息内容\n */\nexport const isValidMessage = (message) => {\n    return message &&\n        typeof message.role === 'string' &&\n        ['user', 'assistant'].includes(message.role) &&\n        typeof message.content === 'string' &&\n        message.content.trim().length > 0;\n};\n/**\n * 过滤无效消息\n */\nexport const filterValidMessages = (messages) => {\n    return messages.filter(isValidMessage);\n};\n/**\n * 获取最后一条用户消息\n */\nexport const getLastUserMessage = (messages) => {\n    const validMessages = filterValidMessages(messages);\n    for (let i = validMessages.length - 1; i >= 0; i--) {\n        if (validMessages[i].role === 'user') {\n            return validMessages[i];\n        }\n    }\n    return null;\n};\n","import { useState, useCallback, useRef } from 'react';\n/**\n * 网络请求Hook\n * 提供缓存、重试和错误处理功能\n */\nexport const useNetworkRequest = (options = {}) => {\n    const { cacheKey, cacheTTL = 5 * 60 * 1000, // 默认缓存5分钟\n    maxRetries = 2, retryDelay = 1000, // 默认重试延迟1秒\n    retryBackoff = 2, // 默认重试延迟倍数\n     } = options;\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const abortControllerRef = useRef(null);\n    // 内存缓存\n    const cacheRef = useRef(new Map());\n    // 检查缓存是否有效\n    const isCacheValid = useCallback((entry) => {\n        return Date.now() - entry.timestamp < cacheTTL;\n    }, [cacheTTL]);\n    // 从缓存获取数据\n    const getFromCache = useCallback((key) => {\n        if (!cacheKey)\n            return null;\n        const fullKey = `${cacheKey}:${key}`;\n        const entry = cacheRef.current.get(fullKey);\n        if (entry && isCacheValid(entry)) {\n            return entry.data;\n        }\n        return null;\n    }, [cacheKey, isCacheValid]);\n    // 设置缓存\n    const setCache = useCallback((key, data) => {\n        if (!cacheKey)\n            return;\n        const fullKey = `${cacheKey}:${key}`;\n        cacheRef.current.set(fullKey, {\n            data,\n            timestamp: Date.now(),\n        });\n    }, [cacheKey]);\n    // 清除缓存\n    const clearCache = useCallback(() => {\n        if (!cacheKey)\n            return;\n        // 清除特定前缀的缓存\n        const keys = Array.from(cacheRef.current.keys());\n        for (const key of keys) {\n            if (key.startsWith(`${cacheKey}:`)) {\n                cacheRef.current.delete(key);\n            }\n        }\n    }, [cacheKey]);\n    // 延迟函数\n    const delay = useCallback((ms) => {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }, []);\n    // 发送请求\n    const sendRequest = useCallback(async (requestConfig, customCacheKey) => {\n        const { url, options = {}, body } = requestConfig;\n        // 如果有缓存，直接返回缓存数据\n        const cacheData = getFromCache(customCacheKey || url);\n        if (cacheData) {\n            return cacheData;\n        }\n        // 取消之前的请求\n        if (abortControllerRef.current) {\n            abortControllerRef.current.abort();\n        }\n        // 创建新的AbortController\n        abortControllerRef.current = new AbortController();\n        setIsLoading(true);\n        setError(null);\n        let retryCount = 0;\n        let currentRetryDelay = retryDelay;\n        const attemptRequest = async () => {\n            try {\n                const fetchOptions = {\n                    ...options,\n                    signal: abortControllerRef.current?.signal,\n                };\n                if (body) {\n                    fetchOptions.body = JSON.stringify(body);\n                    if (!fetchOptions.headers) {\n                        fetchOptions.headers = {};\n                    }\n                    fetchOptions.headers['Content-Type'] = 'application/json';\n                }\n                const response = await fetch(url, fetchOptions);\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                const data = await response.json();\n                // 缓存响应数据\n                setCache(customCacheKey || url, data);\n                return data;\n            }\n            catch (err) {\n                // 如果是手动中止的错误，不重试\n                if (err instanceof Error && err.name === 'AbortError') {\n                    throw err;\n                }\n                retryCount++;\n                // 如果达到最大重试次数，抛出错误\n                if (retryCount > maxRetries) {\n                    setError(err);\n                    throw err;\n                }\n                // 指数退避重试\n                await delay(currentRetryDelay);\n                currentRetryDelay *= retryBackoff;\n                // 递归重试\n                return attemptRequest();\n            }\n        };\n        try {\n            const result = await attemptRequest();\n            return result;\n        }\n        finally {\n            setIsLoading(false);\n        }\n    }, [\n        getFromCache,\n        setCache,\n        retryDelay,\n        retryBackoff,\n        maxRetries,\n        delay,\n    ]);\n    // 取消请求\n    const cancelRequest = useCallback(() => {\n        if (abortControllerRef.current) {\n            abortControllerRef.current.abort();\n            abortControllerRef.current = null;\n        }\n        setIsLoading(false);\n    }, []);\n    return {\n        isLoading,\n        error,\n        sendRequest,\n        cancelRequest,\n        clearCache,\n    };\n};\n/**\n * AI聊天专用的网络请求Hook\n * 针对AI聊天接口进行优化\n */\nexport const useAIChatRequest = () => {\n    const { sendRequest, isLoading, error, clearCache } = useNetworkRequest({\n        cacheKey: 'ai-chat',\n        cacheTTL: 10 * 60 * 1000, // AI聊天缓存10分钟\n        maxRetries: 3,\n        retryDelay: 1000,\n        retryBackoff: 1.5,\n    });\n    // 发送AI聊天请求\n    const sendChatRequest = useCallback(async (messages, options = {}) => {\n        const { model = \"sydf-v1-250520\", temperature = 0.7, stream = true } = options;\n        return sendRequest({\n            url: \"https://flow.ovo.gs/ai\",\n            options: {\n                method: \"POST\",\n            },\n            body: {\n                model,\n                messages,\n                temperature,\n                stream,\n            },\n        }, `chat:${JSON.stringify(messages.slice(-5))}`); // 使用最后5条消息作为缓存键\n    }, [sendRequest]);\n    return {\n        isLoading,\n        error,\n        sendChatRequest,\n        clearCache,\n    };\n};\n","import { useState, useCallback, useRef } from 'react';\nimport { buildSystemPrompt, buildAIMessages, processStreamChunk, processRemainingBuffer, createErrorMessage } from '../utils/messageUtils';\nimport { useAIChatRequest } from './useNetworkRequest';\nimport { useAIChat } from '../AIChatContext';\n/**\n * AI 聊天服务 Hook\n * 处理与 AI 服务的交互，包括发送消息、处理响应等\n */\nexport const useAIChatService = ({ formData, astrolabe, synastryAstrolabe, isSynastryMode = false, personNames = { person1: \"第一个人\", person2: \"第二个人\" }, synastryData, onMessageUpdate, onMessagesChange, onLoadingChange, onGeneratingChange, onStreamingChange, onError, }) => {\n    const [isGenerating, setIsGenerating] = useState(false);\n    const abortControllerRef = useRef(null);\n    const { model } = useAIChat();\n    // 使用AI聊天请求Hook\n    const { sendChatRequest, isLoading: isNetworkLoading, error: networkError } = useAIChatRequest();\n    // 提取公共的流式处理逻辑\n    const processStreamResponse = useCallback(async (response, existingMessages) => {\n        // 处理流式响应\n        const reader = response.body?.getReader();\n        const decoder = new TextDecoder();\n        let assistantMessageContent = \"\";\n        let buffer = \"\";\n        if (reader) {\n            // 通知开始流式传输\n            if (onStreamingChange) {\n                onStreamingChange(true);\n            }\n            try {\n                while (true) {\n                    const { done, value } = await reader.read();\n                    if (done)\n                        break;\n                    const chunk = decoder.decode(value, { stream: true });\n                    const result = processStreamChunk(chunk, buffer, (newContent) => {\n                        assistantMessageContent += newContent;\n                        onMessageUpdate(assistantMessageContent);\n                    });\n                    buffer = result.newBuffer;\n                }\n            }\n            catch (error) {\n                // 如果是手动中止的错误，不显示错误消息\n                if (error instanceof Error && error.name === 'AbortError') {\n                    console.log('用户手动停止了生成');\n                    return { content: \"\", shouldUpdate: false };\n                }\n                throw error;\n            }\n            // 处理缓冲区中剩余的数据\n            buffer = processRemainingBuffer(buffer, (newContent) => {\n                assistantMessageContent += newContent;\n                onMessageUpdate(assistantMessageContent);\n            });\n            // 通知流式传输结束\n            if (onStreamingChange) {\n                onStreamingChange(false);\n            }\n        }\n        return { content: assistantMessageContent, shouldUpdate: true };\n    }, [onMessageUpdate, onStreamingChange]);\n    // 提取公共的AI服务调用逻辑\n    const callAIService = useCallback(async (messages, model) => {\n        // 直接使用原始fetch方法，保持流式处理功能\n        const response = await fetch(\"https://flow.ovo.gs/ai\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                model,\n                messages,\n                temperature: 0.7,\n            }),\n            signal: abortControllerRef.current?.signal,\n        });\n        if (!response.ok) {\n            throw new Error(`AI 服务错误: ${response.status}`);\n        }\n        return response;\n    }, []);\n    // 提取公共的错误处理逻辑\n    const handleError = useCallback((error, userMessage, existingMessages) => {\n        console.error(\"发送消息时出错:\", error);\n        // 移除最后一条空消息并添加错误消息\n        const currentMessages = [...existingMessages];\n        if (currentMessages[currentMessages.length - 1]?.role === \"assistant\" &&\n            !currentMessages[currentMessages.length - 1]?.content.trim()) {\n            currentMessages.pop();\n        }\n        const errorMessage = createErrorMessage(error);\n        currentMessages.push(errorMessage);\n        onMessagesChange(currentMessages);\n        onError(true, userMessage.content);\n    }, [onMessagesChange, onError]);\n    // 发送消息到 AI 服务\n    const sendMessage = useCallback(async (userMessage, existingMessages) => {\n        if (!userMessage.content.trim())\n            return;\n        onLoadingChange(true);\n        setIsGenerating(true);\n        onError(false);\n        try {\n            // 创建新的 AbortController\n            abortControllerRef.current = new AbortController();\n            // 添加一个空的助手消息用于流式更新（用户消息已经在 existingMessages 中）\n            const assistantMessage = { role: \"assistant\", content: \"\" };\n            const updatedMessages = [...existingMessages, assistantMessage];\n            onMessagesChange(updatedMessages);\n            // 构建系统提示\n            const systemPrompt = buildSystemPrompt(formData, astrolabe ?? null, synastryAstrolabe ?? null, isSynastryMode, personNames, synastryData);\n            // 构建发送给AI的消息数组\n            const aiMessages = buildAIMessages(systemPrompt, existingMessages, userMessage);\n            // 调用 AI 服务\n            const response = await callAIService(aiMessages, model);\n            // 处理流式响应\n            const { content: assistantMessageContent, shouldUpdate } = await processStreamResponse(response, existingMessages);\n            // 更新最终消息（用户消息已经在 existingMessages 中）\n            if (shouldUpdate && assistantMessageContent.trim()) {\n                const finalMessages = [...existingMessages, {\n                        role: \"assistant\",\n                        content: assistantMessageContent\n                    }];\n                onMessagesChange(finalMessages);\n            }\n            else {\n                // 如果没有内容，移除空消息\n                onMessagesChange(existingMessages);\n            }\n        }\n        catch (error) {\n            handleError(error, userMessage, existingMessages);\n        }\n        finally {\n            onLoadingChange(false);\n            setIsGenerating(false);\n        }\n    }, [\n        astrolabe,\n        synastryAstrolabe,\n        isSynastryMode,\n        personNames,\n        onLoadingChange,\n        onError,\n        callAIService,\n        processStreamResponse,\n        handleError,\n        onMessagesChange,\n    ]);\n    // 重新生成失败的回复\n    const regenerateResponse = useCallback(async (failedMessage, existingMessages) => {\n        if (!failedMessage.trim())\n            return;\n        onError(false);\n        onLoadingChange(true);\n        setIsGenerating(true);\n        try {\n            // 创建新的 AbortController\n            abortControllerRef.current = new AbortController();\n            // 添加一个空的助手消息用于流式更新（用户消息已经在 existingMessages 中）\n            const assistantMessage = { role: \"assistant\", content: \"\" };\n            const updatedMessages = [...existingMessages, assistantMessage];\n            onMessagesChange(updatedMessages);\n            // 构建系统提示\n            const systemPrompt = buildSystemPrompt(formData, astrolabe ?? null, synastryAstrolabe ?? null, isSynastryMode, personNames, synastryData);\n            // 构建发送给AI的消息数组（排除最后一条失败的助手消息）\n            const messagesWithoutLastAssistant = existingMessages.filter(msg => !(msg.role === \"assistant\" && msg === existingMessages[existingMessages.length - 1]));\n            const aiMessages = [\n                { role: \"system\", content: systemPrompt },\n                ...messagesWithoutLastAssistant,\n                { role: \"user\", content: failedMessage }\n            ];\n            // 调用 AI 服务\n            const response = await callAIService(aiMessages, model);\n            // 处理流式响应\n            const { content: assistantMessageContent, shouldUpdate } = await processStreamResponse(response, existingMessages);\n            // 更新最终消息（用户消息已经在 messagesWithoutLastAssistant 中）\n            if (shouldUpdate && assistantMessageContent.trim()) {\n                const finalMessages = [...messagesWithoutLastAssistant, {\n                        role: \"assistant\",\n                        content: assistantMessageContent\n                    }];\n                onMessagesChange(finalMessages);\n            }\n            else {\n                // 如果没有内容，恢复原始消息\n                onMessagesChange(existingMessages);\n            }\n        }\n        catch (error) {\n            console.error(\"重新生成消息时出错:\", error);\n            // 恢复原始消息并添加错误消息\n            const errorMessage = createErrorMessage(error);\n            const finalMessages = [...existingMessages, errorMessage];\n            onMessagesChange(finalMessages);\n            onError(true, failedMessage);\n        }\n        finally {\n            onLoadingChange(false);\n            setIsGenerating(false);\n        }\n    }, [\n        astrolabe,\n        synastryAstrolabe,\n        isSynastryMode,\n        personNames,\n        onError,\n        onLoadingChange,\n        callAIService,\n        processStreamResponse,\n        onMessagesChange,\n        model,\n    ]);\n    // 停止生成\n    const stopGeneration = useCallback(() => {\n        if (abortControllerRef.current) {\n            abortControllerRef.current.abort();\n            abortControllerRef.current = null;\n        }\n        setIsGenerating(false);\n        onGeneratingChange(false);\n        onLoadingChange(false);\n    }, [onGeneratingChange, onLoadingChange]);\n    return {\n        isGenerating,\n        sendMessage,\n        regenerateResponse,\n        stopGeneration,\n    };\n};\n","import { useState, useEffect, useCallback } from 'react';\nimport { getLayoutConfig, isMobileDevice, updateLayoutCSSVariables, createLayoutObserver } from '../utils/layoutUtils';\n/**\n * 聊天布局 Hook\n * 提供响应式布局管理和 CSS Grid 布局配置\n */\nexport const useChatLayout = () => {\n    const [layoutConfig, setLayoutConfig] = useState(getLayoutConfig());\n    const [isInitialized, setIsInitialized] = useState(false);\n    // 更新布局配置\n    const updateLayout = useCallback((newConfig) => {\n        const updatedConfig = { ...layoutConfig, ...newConfig };\n        setLayoutConfig(updatedConfig);\n        updateLayoutCSSVariables(updatedConfig);\n    }, [layoutConfig]);\n    // 初始化布局\n    const initializeLayout = useCallback(() => {\n        const config = getLayoutConfig();\n        updateLayoutCSSVariables(config);\n        setLayoutConfig(config);\n        setIsInitialized(true);\n    }, []);\n    // 处理窗口大小变化\n    const handleResize = useCallback(() => {\n        const config = getLayoutConfig();\n        updateLayout(config);\n    }, [updateLayout]);\n    // 处理移动端特殊布局\n    const handleMobileLayout = useCallback(() => {\n        if (!layoutConfig.isMobile)\n            return;\n        // 为移动端添加特殊的 body 类\n        document.body.classList.add('mobile-chat');\n        // 设置移动端特定的 CSS 变量\n        document.documentElement.style.setProperty('--chat-font-size', '16px');\n    }, [layoutConfig.isMobile]);\n    // 处理桌面端布局\n    const handleDesktopLayout = useCallback(() => {\n        document.body.classList.remove('mobile-chat');\n        document.documentElement.style.setProperty('--chat-font-size', '14px');\n    }, []);\n    // 初始化监听器\n    useEffect(() => {\n        if (isInitialized)\n            return;\n        // 初始化布局\n        initializeLayout();\n        // 创建布局观察器\n        const observer = createLayoutObserver(handleResize);\n        observer.observe(document.documentElement);\n        // 监听窗口大小变化\n        window.addEventListener('resize', handleResize);\n        // 根据设备类型处理布局\n        if (layoutConfig.isMobile) {\n            handleMobileLayout();\n        }\n        else {\n            handleDesktopLayout();\n        }\n        return () => {\n            observer.disconnect();\n            window.removeEventListener('resize', handleResize);\n        };\n    }, [\n        isInitialized,\n        initializeLayout,\n        handleResize,\n        layoutConfig.isMobile,\n        handleMobileLayout,\n        handleDesktopLayout\n    ]);\n    // 监听设备类型变化\n    useEffect(() => {\n        const handleOrientationChange = () => {\n            const currentIsMobile = isMobileDevice();\n            if (currentIsMobile !== layoutConfig.isMobile) {\n                updateLayout({ isMobile: currentIsMobile });\n            }\n        };\n        window.addEventListener('orientationchange', handleOrientationChange);\n        return () => {\n            window.removeEventListener('orientationchange', handleOrientationChange);\n        };\n    }, [layoutConfig.isMobile, updateLayout]);\n    // 生成 CSS Grid 模板样式\n    const getGridTemplateStyle = useCallback(() => {\n        if (layoutConfig.isMobile) {\n            // 检查键盘是否可见\n            const isKeyboardVisible = document.body.classList.contains('keyboard-visible');\n            if (isKeyboardVisible) {\n                return {\n                    gridTemplateRows: `\n            var(--header-height)\n            minmax(0, 1fr)\n            var(--keyboard-height)\n            auto\n          `,\n                };\n            }\n            return {\n                gridTemplateRows: `\n          var(--header-height)\n          minmax(0, 1fr)\n          auto\n        `,\n            };\n        }\n        return {\n            gridTemplateRows: '1fr auto',\n        };\n    }, [layoutConfig.isMobile]);\n    // 生成容器样式\n    const getContainerStyle = useCallback(() => {\n        const baseStyle = {\n            display: 'grid',\n            height: '100%',\n            minHeight: 0,\n            overflow: 'hidden',\n        };\n        if (layoutConfig.isMobile) {\n            return {\n                ...baseStyle,\n                position: 'fixed',\n                top: 0,\n                left: 0,\n                right: 0,\n                bottom: 0,\n                height: '100dvh',\n                width: '100%',\n                ...getGridTemplateStyle(),\n            };\n        }\n        return {\n            ...baseStyle,\n            ...getGridTemplateStyle(),\n        };\n    }, [layoutConfig.isMobile, getGridTemplateStyle]);\n    // 生成消息区域样式\n    const getMessagesContainerStyle = useCallback(() => {\n        const baseStyle = {\n            overflowY: 'auto',\n            minHeight: 0,\n            scrollSnapType: 'y proximity',\n        };\n        if (layoutConfig.isMobile) {\n            return {\n                ...baseStyle,\n                paddingTop: 'var(--safe-area-top)',\n                paddingBottom: 'var(--safe-area-bottom)',\n                // 移除固定 margin 计算，使用 Grid 自动分配空间\n                marginTop: 0,\n                marginBottom: 0,\n            };\n        }\n        return {\n            ...baseStyle,\n            padding: '15px',\n        };\n    }, [layoutConfig.isMobile]);\n    // 生成输入区域样式\n    const getInputContainerStyle = useCallback(() => {\n        const baseStyle = {\n            flexShrink: 0,\n            backgroundColor: 'var(--background-color)',\n        };\n        if (layoutConfig.isMobile) {\n            return {\n                ...baseStyle,\n                position: 'sticky',\n                bottom: 0,\n                zIndex: 100,\n                paddingBottom: 'var(--safe-area-bottom)',\n                borderTop: '1px solid var(--border-color)',\n            };\n        }\n        return {\n            ...baseStyle,\n            padding: '10px',\n        };\n    }, [layoutConfig.isMobile]);\n    return {\n        layoutConfig,\n        isInitialized,\n        getContainerStyle,\n        getMessagesContainerStyle,\n        getInputContainerStyle,\n        updateLayout,\n    };\n};\n","import React, { useMemo, useState, useRef, useEffect } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport remarkBreaks from 'remark-breaks';\n/**\n * 懒加载图片组件\n * 实现图片懒加载，提高页面加载性能\n */\nconst LazyImage = ({ src, alt, className = \"markdown-img\", ...props }) => {\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [isInView, setIsInView] = useState(false);\n    const imgRef = useRef(null);\n    useEffect(() => {\n        const observer = new IntersectionObserver(([entry]) => {\n            if (entry.isIntersecting) {\n                setIsInView(true);\n                observer.disconnect();\n            }\n        }, {\n            rootMargin: '100px', // 提前100px开始加载\n            threshold: 0.1\n        });\n        if (imgRef.current) {\n            observer.observe(imgRef.current);\n        }\n        return () => {\n            if (imgRef.current) {\n                observer.unobserve(imgRef.current);\n            }\n        };\n    }, []);\n    const handleLoad = () => {\n        setIsLoaded(true);\n    };\n    return (React.createElement(\"div\", { className: \"markdown-img-container\" },\n        !isLoaded && (React.createElement(\"div\", { className: \"markdown-img-placeholder\" },\n            React.createElement(\"div\", { className: \"loading-spinner\" }))),\n        React.createElement(\"img\", { ref: imgRef, src: isInView ? src : undefined, alt: alt, className: `${className} ${isLoaded ? 'loaded' : ''}`, onLoad: handleLoad, ...props })));\n};\n/**\n * Markdown格式化组件\n * 将markdown文本转换为格式化的HTML元素\n * 优化版本：改进换行处理、添加更多元素支持、优化样式\n */\nconst MarkdownFormatter = ({ content }) => {\n    // 预处理内容，简化处理 - 使用useMemo避免重复计算\n    const processedContent = useMemo(() => {\n        return content\n            .replace(/\\n{3,}/g, '\\n\\n') // 将3个或更多换行减少为2个\n            .replace(/^[\\s─]*─{3,}[\\s─]*$/gm, '\\n\\n---\\n\\n') // 将由 ─ 组成的分割线转换为标准 markdown 分割线\n            .replace(/^\\s+|\\s+$/g, ''); // 去除首尾空白\n    }, [content]);\n    // 使用useMemo优化components对象，避免每次渲染都重新创建\n    const components = useMemo(() => ({\n        // 自定义标题样式\n        h1: ({ children, ...props }) => (React.createElement(\"h1\", { className: \"markdown-h1\", ...props }, children)),\n        h2: ({ children, ...props }) => (React.createElement(\"h2\", { className: \"markdown-h2\", ...props }, children)),\n        h3: ({ children, ...props }) => (React.createElement(\"h3\", { className: \"markdown-h3\", ...props }, children)),\n        h4: ({ children, ...props }) => (React.createElement(\"h4\", { className: \"markdown-h4\", ...props }, children)),\n        h5: ({ children, ...props }) => (React.createElement(\"h5\", { className: \"markdown-h5\", ...props }, children)),\n        h6: ({ children, ...props }) => (React.createElement(\"h6\", { className: \"markdown-h6\", ...props }, children)),\n        // 自定义段落样式\n        p: ({ children, ...props }) => (React.createElement(\"p\", { className: \"markdown-p\", ...props }, children)),\n        // 自定义列表样式\n        ul: ({ children, ...props }) => (React.createElement(\"ul\", { className: \"markdown-ul\", ...props }, children)),\n        ol: ({ children, ...props }) => (React.createElement(\"ol\", { className: \"markdown-ol\", ...props }, children)),\n        li: ({ children, ...props }) => {\n            // 检查是否是任务列表项\n            const isTask = React.Children.toArray(children).some((child) => React.isValidElement(child) && child.type === 'input');\n            return (React.createElement(\"li\", { className: `markdown-li ${isTask ? 'task-list-item' : ''}`, ...props }, children));\n        },\n        // 自定义链接样式\n        a: ({ href, children, ...props }) => (React.createElement(\"a\", { href: href, className: \"markdown-a\", target: \"_blank\", rel: \"noopener noreferrer\", ...props }, children)),\n        // 自定义代码样式\n        code: (props) => {\n            const { inline, className, children, ...rest } = props;\n            const match = /language-(\\w+)/.exec(className || '');\n            const language = match ? match[1] : '';\n            return !inline && match ? (React.createElement(\"div\", { className: \"markdown-code-wrapper\" },\n                React.createElement(\"div\", { className: \"markdown-code-header\" },\n                    React.createElement(\"span\", { className: \"markdown-code-language\" }, language)),\n                React.createElement(\"code\", { className: `markdown-code-block ${className}`, ...rest }, children))) : (React.createElement(\"code\", { className: \"markdown-code-inline\", ...rest }, children));\n        },\n        // 自定义代码块样式\n        pre: ({ children, ...props }) => (React.createElement(\"pre\", { className: \"markdown-pre\", ...props }, children)),\n        // 自定义引用样式\n        blockquote: ({ children, ...props }) => (React.createElement(\"blockquote\", { className: \"markdown-blockquote\", ...props }, children)),\n        // 自定义表格样式 - 改进响应式支持\n        table: ({ children, ...props }) => (React.createElement(\"div\", { className: \"markdown-table-wrapper\" },\n            React.createElement(\"table\", { className: \"markdown-table\", ...props }, children))),\n        thead: ({ children, ...props }) => (React.createElement(\"thead\", { className: \"markdown-thead\", ...props }, children)),\n        tbody: ({ children, ...props }) => (React.createElement(\"tbody\", { className: \"markdown-tbody\", ...props }, children)),\n        tr: ({ children, ...props }) => (React.createElement(\"tr\", { className: \"markdown-tr\", ...props }, children)),\n        th: ({ children, ...props }) => (React.createElement(\"th\", { className: \"markdown-th\", ...props }, children)),\n        td: ({ children, ...props }) => (React.createElement(\"td\", { className: \"markdown-td\", ...props }, children)),\n        // 自定义强调样式\n        strong: ({ children, ...props }) => (React.createElement(\"strong\", { className: \"markdown-strong\", ...props }, children)),\n        em: ({ children, ...props }) => (React.createElement(\"em\", { className: \"markdown-em\", ...props }, children)),\n        // 自定义分割线样式\n        hr: ({ ...props }) => React.createElement(\"hr\", { className: \"markdown-hr\", ...props }),\n        // 添加对图片的支持 - 优化版本，支持懒加载\n        img: ({ src, alt, ...props }) => {\n            // 使用自定义图片组件实现懒加载\n            return React.createElement(LazyImage, { src: src, alt: alt || '', ...props });\n        },\n        // 添加对删除线的支持\n        del: ({ children, ...props }) => (React.createElement(\"del\", { className: \"markdown-del\", ...props }, children)),\n        // 添加对任务列表的支持\n        input: ({ checked, type, ...props }) => (React.createElement(\"input\", { type: \"checkbox\", checked: checked, readOnly: true, className: \"markdown-task-checkbox\", ...props })),\n    }), []);\n    // 优化长内容渲染，使用memo避免不必要的重渲染\n    const markdownContent = useMemo(() => (React.createElement(ReactMarkdown, { remarkPlugins: [remarkGfm, remarkBreaks], rehypePlugins: [], components: components }, processedContent)), [processedContent, components]);\n    return (React.createElement(\"div\", { className: \"markdown-content\" }, markdownContent));\n};\nexport default React.memo(MarkdownFormatter);\n","import React, { useState, useEffect, useRef, useMemo, useCallback } from 'react';\nimport MarkdownFormatter from '../../utils/markdownFormatter';\n// 使用React.memo优化组件重渲染\nconst MessageItemComponent = ({ message, isLastMessage = false, showRegenerate = false, onRegenerate, messageRef, isStreaming = false, showActions = false, }) => {\n    const isUser = message.role === 'user';\n    const [displayedContent, setDisplayedContent] = useState('');\n    const [hasStartedStreaming, setHasStartedStreaming] = useState(false);\n    const contentRef = useRef(null);\n    // 使用useCallback优化函数\n    const handleCopy = useCallback(() => {\n        navigator.clipboard.writeText(message.content)\n            .then(() => {\n            // 可以添加复制成功的提示\n            console.log('内容已复制到剪贴板');\n        })\n            .catch(err => {\n            console.error('复制失败:', err);\n        });\n    }, [message.content]);\n    const handleShare = useCallback(() => {\n        if (navigator.share) {\n            const shareData = {\n                title: '紫微斗数AI回复',\n                text: message.content,\n            };\n            navigator.share(shareData)\n                .catch(err => {\n                console.error('分享失败:', err);\n                // 如果分享失败，尝试复制到剪贴板\n                handleCopy();\n            });\n        }\n        else {\n            // 如果不支持Web Share API，则复制到剪贴板\n            handleCopy();\n        }\n    }, [message.content, handleCopy]);\n    // 优化状态计算逻辑\n    const shouldShowActions = useMemo(() => {\n        return showActions && !isStreaming && !isUser && hasStartedStreaming;\n    }, [showActions, isStreaming, isUser, hasStartedStreaming]);\n    // 合并多个useEffect为一个，减少渲染次数\n    useEffect(() => {\n        // 直接使用message.content，不需要previousContent状态\n        setDisplayedContent(message.content);\n        if (!isUser && isStreaming) {\n            setHasStartedStreaming(true);\n        }\n    }, [message.content, isUser, isStreaming]);\n    return (React.createElement(\"div\", { ref: messageRef, className: `message-item ${isUser ? 'user-message' : 'assistant-message'}` },\n        React.createElement(\"div\", { className: `message-wrapper ${isUser ? 'user-message' : 'assistant-message'}` },\n            React.createElement(\"div\", { className: `message-content ${isUser ? 'user-message' : 'assistant-message'}` }, isUser ? (displayedContent) : (React.createElement(\"div\", { ref: contentRef, className: \"markdown-content message-markdown\" },\n                React.createElement(MarkdownFormatter, { content: displayedContent })))),\n            showRegenerate && (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { className: \"message-spacer\" }),\n                React.createElement(\"div\", { className: \"regenerate-container\" },\n                    React.createElement(\"button\", { className: \"regenerate-button quick-action-button\", onClick: onRegenerate, title: \"\\u91CD\\u65B0\\u751F\\u6210\" },\n                        React.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", width: \"14\", height: \"14\", viewBox: \"0 0 24 24\", fill: \"none\", stroke: \"currentColor\", strokeWidth: \"2\", strokeLinecap: \"round\", strokeLinejoin: \"round\" },\n                            React.createElement(\"path\", { d: \"M1 4v6h6\" }),\n                            React.createElement(\"path\", { d: \"M3.51 15a9 9 0 1 0 2.13-9.36L1 10\" })),\n                        React.createElement(\"span\", null, \"\\u91CD\\u65B0\\u751F\\u6210\"))))),\n            shouldShowActions && (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { className: \"message-spacer\" }),\n                React.createElement(\"div\", { className: \"message-actions-container\" },\n                    React.createElement(\"button\", { className: \"copy-button\", onClick: handleCopy, title: \"\\u590D\\u5236\", \"aria-label\": \"\\u590D\\u5236\" },\n                        React.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", width: \"16\", height: \"16\", viewBox: \"0 0 24 24\", fill: \"none\", stroke: \"currentColor\", strokeWidth: \"2\", strokeLinecap: \"round\", strokeLinejoin: \"round\" },\n                            React.createElement(\"rect\", { width: \"14\", height: \"14\", x: \"8\", y: \"8\", rx: \"2\", ry: \"2\" }),\n                            React.createElement(\"path\", { d: \"m4 16c-1.1 0-2-.9-2-2v-10c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\" }))),\n                    React.createElement(\"button\", { className: \"share-button\", onClick: handleShare, title: \"\\u5206\\u4EAB\", \"aria-label\": \"\\u5206\\u4EAB\" },\n                        React.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", width: \"16\", height: \"16\", viewBox: \"0 0 24 24\", fill: \"none\", stroke: \"currentColor\", strokeWidth: \"2\", strokeLinecap: \"round\", strokeLinejoin: \"round\" },\n                            React.createElement(\"circle\", { cx: \"18\", cy: \"5\", r: \"3\" }),\n                            React.createElement(\"circle\", { cx: \"6\", cy: \"12\", r: \"3\" }),\n                            React.createElement(\"circle\", { cx: \"18\", cy: \"19\", r: \"3\" }),\n                            React.createElement(\"line\", { x1: \"8.59\", y1: \"13.51\", x2: \"15.42\", y2: \"17.49\" }),\n                            React.createElement(\"line\", { x1: \"15.41\", y1: \"6.51\", x2: \"8.59\", y2: \"10.49\" })))))))));\n};\n// 使用React.memo优化组件重渲染，避免不必要的重新渲染\nconst MessageItem = React.memo(MessageItemComponent);\nexport default MessageItem;\n","import React from 'react';\nconst TypingIndicator = () => {\n    return (React.createElement(\"div\", { className: \"typing-indicator\" },\n        React.createElement(\"span\", { className: \"typing-dot\" }),\n        React.createElement(\"span\", { className: \"typing-dot\" }),\n        React.createElement(\"span\", { className: \"typing-dot\" })));\n};\nexport default TypingIndicator;\n","import { useState, useEffect, useCallback } from 'react';\n/**\n * 消息存储和分页Hook\n * 实现消息的本地存储和分页加载，优化内存使用\n */\nexport const useMessageStorage = ({ maxMessagesInMemory = 100, pageSize = 20, storageKey = 'ai-chat-messages' } = {}) => {\n    const [allMessages, setAllMessages] = useState([]);\n    const [visibleMessages, setVisibleMessages] = useState([]);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [isLoading, setIsLoading] = useState(false);\n    const [hasMore, setHasMore] = useState(true);\n    // 从本地存储加载消息\n    const loadMessagesFromStorage = useCallback(() => {\n        try {\n            const storedMessages = localStorage.getItem(storageKey);\n            if (storedMessages) {\n                const parsedMessages = JSON.parse(storedMessages);\n                // 验证消息格式\n                if (Array.isArray(parsedMessages) && parsedMessages.every(msg => msg && typeof msg === 'object' &&\n                    (msg.role === 'user' || msg.role === 'assistant') &&\n                    typeof msg.content === 'string')) {\n                    return parsedMessages;\n                }\n            }\n        }\n        catch (error) {\n            console.error('从本地存储加载消息失败:', error);\n        }\n        return [];\n    }, [storageKey]);\n    // 保存消息到本地存储\n    const saveMessagesToStorage = useCallback((messages) => {\n        try {\n            localStorage.setItem(storageKey, JSON.stringify(messages));\n        }\n        catch (error) {\n            console.error('保存消息到本地存储失败:', error);\n            // 如果存储失败，可能是存储空间不足，尝试清理旧消息\n            try {\n                // 保留最近的消息\n                const recentMessages = messages.slice(-maxMessagesInMemory);\n                localStorage.setItem(storageKey, JSON.stringify(recentMessages));\n            }\n            catch (cleanupError) {\n                console.error('清理旧消息失败:', cleanupError);\n            }\n        }\n    }, [storageKey, maxMessagesInMemory]);\n    // 初始化时从本地存储加载消息\n    useEffect(() => {\n        const messages = loadMessagesFromStorage();\n        setAllMessages(messages);\n        // 计算初始可见消息\n        const initialVisible = messages.slice(-pageSize);\n        setVisibleMessages(initialVisible);\n        setCurrentPage(1);\n        setHasMore(messages.length > pageSize);\n    }, [loadMessagesFromStorage, pageSize]);\n    // 添加新消息\n    const addMessages = useCallback((newMessages) => {\n        setAllMessages(prev => {\n            const updated = [...prev, ...newMessages];\n            // 限制内存中的消息数量\n            if (updated.length > maxMessagesInMemory) {\n                // 保留最新的消息\n                const trimmed = updated.slice(-maxMessagesInMemory);\n                saveMessagesToStorage(trimmed);\n                return trimmed;\n            }\n            saveMessagesToStorage(updated);\n            return updated;\n        });\n        // 如果当前在最后一页，更新可见消息\n        setVisibleMessages(prev => [...prev, ...newMessages]);\n    }, [maxMessagesInMemory, saveMessagesToStorage]);\n    // 加载更多消息（分页）\n    const loadMoreMessages = useCallback(() => {\n        if (isLoading || !hasMore)\n            return;\n        setIsLoading(true);\n        // 使用setTimeout避免阻塞UI\n        setTimeout(() => {\n            const nextPage = currentPage + 1;\n            const startIndex = Math.max(0, allMessages.length - nextPage * pageSize);\n            const endIndex = allMessages.length - (nextPage - 1) * pageSize;\n            if (startIndex <= 0) {\n                // 已经到达第一页\n                const newVisibleMessages = allMessages.slice(0, endIndex);\n                setVisibleMessages(newVisibleMessages);\n                setHasMore(false);\n            }\n            else {\n                // 加载上一页的消息\n                const newMessages = allMessages.slice(startIndex, endIndex);\n                setVisibleMessages(prev => [...newMessages, ...prev]);\n                setCurrentPage(nextPage);\n            }\n            setIsLoading(false);\n        }, 0);\n    }, [allMessages, currentPage, hasMore, isLoading, pageSize]);\n    // 清空所有消息\n    const clearMessages = useCallback(() => {\n        setAllMessages([]);\n        setVisibleMessages([]);\n        setCurrentPage(1);\n        setHasMore(false);\n        try {\n            localStorage.removeItem(storageKey);\n        }\n        catch (error) {\n            console.error('清空本地存储失败:', error);\n        }\n    }, [storageKey]);\n    // 重置到最新消息\n    const resetToLatest = useCallback(() => {\n        const latestMessages = allMessages.slice(-pageSize);\n        setVisibleMessages(latestMessages);\n        setCurrentPage(1);\n        setHasMore(allMessages.length > pageSize);\n    }, [allMessages, pageSize]);\n    return {\n        allMessages,\n        visibleMessages,\n        currentPage,\n        isLoading,\n        hasMore,\n        addMessages,\n        loadMoreMessages,\n        clearMessages,\n        resetToLatest\n    };\n};\n","import React, { useMemo, useEffect, useRef } from 'react';\nimport MessageItem from './MessageItem';\nimport TypingIndicator from './TypingIndicator';\nimport SkeletonLoader from './SkeletonLoader';\nimport { useMessageStorage as useMessageStorageHook } from '../hooks/useMessageStorage';\nimport { useVirtualScroll as useVirtualScrollHook } from '../hooks/useVirtualScroll';\n// 使用React.memo优化组件重渲染\nconst MessageList = React.memo(({ messages, isLoading, generationFailed, lastFailedMessage, onRegenerate, messagesContainerRef, lastMessageRef, isStreaming = false, useMessageStorage = false, // 默认不使用消息存储，保持向后兼容\nuseVirtualScroll = false, // 默认不使用虚拟滚动，保持向后兼容\n }) => {\n    // 使用消息存储和分页功能\n    const messageStorage = useMessageStorage ? useMessageStorageHook({\n        maxMessagesInMemory: 200, // 内存中最多保存200条消息\n        pageSize: 30, // 每页显示30条消息\n    }) : null;\n    const { visibleMessages: storedVisibleMessages = messages, isLoading: isStorageLoading = false, hasMore = false, addMessages = () => { }, loadMoreMessages = () => { }, resetToLatest = () => { } } = messageStorage || {};\n    // 确定使用哪些消息\n    const displayMessages = useMessageStorage ? storedVisibleMessages : messages;\n    // 使用虚拟滚动\n    const virtualScroll = useVirtualScroll ? useVirtualScrollHook(displayMessages, messagesContainerRef, {\n        itemHeight: 80, // 默认项目高度\n        overscan: 3, // 预渲染的项目数量\n        defaultHeight: 80, // 默认高度\n    }) : null;\n    const { visibleItems = [], totalHeight = 0, isScrolling = false, measureItem = () => { }, scrollToIndex = () => { }, scrollToBottom = () => { }, } = virtualScroll || {};\n    // 监听外部消息变化，更新存储\n    useEffect(() => {\n        if (useMessageStorage && messages.length > 0) {\n            // 只添加新的消息\n            const lastStoredMessage = storedVisibleMessages[storedVisibleMessages.length - 1];\n            const newMessages = lastStoredMessage\n                ? messages.filter(msg => !storedVisibleMessages.some((storedMsg) => storedMsg.role === msg.role && storedMsg.content === msg.content))\n                : messages;\n            if (newMessages.length > 0) {\n                addMessages(newMessages);\n            }\n        }\n    }, [messages, storedVisibleMessages, useMessageStorage, addMessages]);\n    // 滚动到顶部的观察器，用于加载更多消息\n    const topObserverRef = useRef(null);\n    // 设置Intersection Observer来检测滚动到顶部\n    useEffect(() => {\n        if (!useMessageStorage || !hasMore || isStorageLoading)\n            return;\n        const observer = new IntersectionObserver((entries) => {\n            if (entries[0].isIntersecting) {\n                loadMoreMessages();\n            }\n        }, {\n            root: messagesContainerRef.current,\n            threshold: 0.1,\n            rootMargin: '100px'\n        });\n        if (topObserverRef.current) {\n            observer.observe(topObserverRef.current);\n        }\n        return () => {\n            if (topObserverRef.current) {\n                observer.unobserve(topObserverRef.current);\n            }\n        };\n    }, [useMessageStorage, hasMore, isStorageLoading, loadMoreMessages, messagesContainerRef]);\n    // 自动滚动到底部\n    useEffect(() => {\n        if (!isScrolling && displayMessages.length > 0) {\n            scrollToBottom();\n        }\n    }, [displayMessages.length, isScrolling, scrollToBottom]);\n    // 使用useMemo优化消息列表渲染，避免不必要的重渲染\n    const messageItems = useMemo(() => {\n        if (useVirtualScroll) {\n            return visibleItems.map(({ item, index, offset, height }) => {\n                const originalIndex = displayMessages.indexOf(item);\n                const isLastMessage = originalIndex === displayMessages.length - 1;\n                return (React.createElement(\"div\", { key: `${item.role}-${originalIndex}-${item.content.slice(0, 20)}`, className: \"message-item-container\", style: {\n                        position: 'absolute',\n                        top: offset,\n                        left: 0,\n                        right: 0,\n                        height: height || 'auto',\n                    }, ref: (el) => {\n                        if (el) {\n                            // 测量项目高度\n                            const measuredHeight = el.getBoundingClientRect().height;\n                            measureItem(`${item.role}-${originalIndex}`, measuredHeight);\n                        }\n                    } },\n                    React.createElement(MessageItem, { message: item, isLastMessage: isLastMessage, showRegenerate: generationFailed &&\n                            item.role === \"assistant\" &&\n                            isLastMessage, onRegenerate: onRegenerate, messageRef: isLastMessage ? lastMessageRef : undefined, isStreaming: isStreaming && isLastMessage && item.role === \"assistant\", showActions: item.role === \"assistant\" && isLastMessage && !isStreaming })));\n            });\n        }\n        else {\n            return displayMessages.map((message, index) => {\n                const isLastMessage = index === displayMessages.length - 1;\n                return (React.createElement(MessageItem, { key: `${message.role}-${index}-${message.content.slice(0, 20)}`, message: message, isLastMessage: isLastMessage, showRegenerate: generationFailed &&\n                        message.role === \"assistant\" &&\n                        isLastMessage, onRegenerate: onRegenerate, messageRef: isLastMessage ? lastMessageRef : undefined, isStreaming: isStreaming && isLastMessage && message.role === \"assistant\", showActions: message.role === \"assistant\" && isLastMessage && !isStreaming }));\n            });\n        }\n    }, [displayMessages, visibleItems, useVirtualScroll, isLoading, generationFailed, isStreaming, onRegenerate, lastMessageRef, measureItem]);\n    return (React.createElement(\"div\", { ref: messagesContainerRef, className: \"chat-messages\" },\n        useVirtualScroll && (React.createElement(\"div\", { className: \"virtual-scroll-container\" }, messageItems)),\n        !useVirtualScroll && (React.createElement(React.Fragment, null,\n            useMessageStorage && hasMore && (React.createElement(\"div\", { ref: topObserverRef, className: \"load-more-trigger\" }, isStorageLoading ? '加载中...' : '向上滚动加载更多消息')),\n            messageItems)),\n        isLoading && (React.createElement(\"div\", { className: \"message assistant-message\" },\n            React.createElement(TypingIndicator, null))),\n        (isStorageLoading || (isLoading && displayMessages.length === 0)) && (React.createElement(\"div\", { className: \"chat-skeleton-fallback\" },\n            React.createElement(SkeletonLoader, { type: \"message\", count: 3, animate: true }))),\n        React.createElement(\"div\", { ref: lastMessageRef, className: \"bottom-observer\" })));\n});\nexport default MessageList;\n","import { useState, useEffect, useRef, useCallback, useMemo } from 'react';\n/**\n * 虚拟滚动Hook\n * 支持动态高度的虚拟滚动，优化长列表性能\n */\nexport const useVirtualScroll = (items, containerRef, options = {}) => {\n    const { itemHeight = 80, // 默认项目高度\n    overscan = 5, // 预渲染的项目数量\n    defaultHeight = 80, // 默认高度\n     } = options;\n    const [scrollTop, setScrollTop] = useState(0);\n    const [containerHeight, setContainerHeight] = useState(0);\n    const [measuredItems, setMeasuredItems] = useState(new Map());\n    const [isScrolling, setIsScrolling] = useState(false);\n    const scrollTimeoutRef = useRef(null);\n    // 计算总高度\n    const totalHeight = useMemo(() => {\n        let height = 0;\n        for (let i = 0; i < items.length; i++) {\n            const item = items[i];\n            const measured = measuredItems.get(`${item.role}-${i}`);\n            height += measured?.height || defaultHeight;\n        }\n        return height;\n    }, [items, measuredItems, defaultHeight]);\n    // 计算可见项目\n    const visibleRange = useMemo(() => {\n        let startOffset = 0;\n        let startIndex = 0;\n        let endIndex = items.length;\n        // 找到起始索引\n        for (let i = 0; i < items.length; i++) {\n            const item = items[i];\n            const measured = measuredItems.get(`${item.role}-${i}`);\n            const itemHeight = measured?.height || defaultHeight;\n            if (startOffset + itemHeight > scrollTop) {\n                startIndex = Math.max(0, i - overscan);\n                break;\n            }\n            startOffset += itemHeight;\n        }\n        // 找到结束索引\n        let currentOffset = startOffset;\n        for (let i = startIndex; i < items.length; i++) {\n            const item = items[i];\n            const measured = measuredItems.get(`${item.role}-${i}`);\n            const itemHeight = measured?.height || defaultHeight;\n            if (currentOffset > scrollTop + containerHeight) {\n                endIndex = Math.min(items.length, i + overscan);\n                break;\n            }\n            currentOffset += itemHeight;\n        }\n        return { startIndex, endIndex, startOffset };\n    }, [items, scrollTop, containerHeight, measuredItems, defaultHeight, overscan]);\n    // 测量项目高度\n    const measureItem = useCallback((id, height) => {\n        setMeasuredItems(prev => {\n            const newMap = new Map(prev);\n            const existing = newMap.get(id);\n            // 只有当高度变化时才更新\n            if (!existing || existing.height !== height) {\n                newMap.set(id, { id, height, offset: existing?.offset || 0 });\n                // 更新后续项目的偏移量\n                let offset = 0;\n                for (let i = 0; i < items.length; i++) {\n                    const itemId = `${items[i].role}-${i}`;\n                    const item = newMap.get(itemId);\n                    if (item) {\n                        newMap.set(itemId, { ...item, offset });\n                        offset += item.height;\n                    }\n                    else {\n                        offset += defaultHeight;\n                    }\n                }\n            }\n            return newMap;\n        });\n    }, [items, defaultHeight]);\n    // 处理滚动事件\n    const handleScroll = useCallback(() => {\n        if (containerRef.current) {\n            setScrollTop(containerRef.current.scrollTop);\n            setIsScrolling(true);\n            // 清除之前的超时\n            if (scrollTimeoutRef.current) {\n                clearTimeout(scrollTimeoutRef.current);\n            }\n            // 设置新的超时\n            scrollTimeoutRef.current = setTimeout(() => {\n                setIsScrolling(false);\n            }, 150);\n        }\n    }, [containerRef]);\n    // 更新容器高度\n    useEffect(() => {\n        const updateContainerHeight = () => {\n            if (containerRef.current) {\n                setContainerHeight(containerRef.current.clientHeight);\n            }\n        };\n        updateContainerHeight();\n        window.addEventListener('resize', updateContainerHeight);\n        return () => {\n            window.removeEventListener('resize', updateContainerHeight);\n            if (scrollTimeoutRef.current) {\n                clearTimeout(scrollTimeoutRef.current);\n            }\n        };\n    }, [containerRef]);\n    // 添加滚动事件监听器\n    useEffect(() => {\n        const container = containerRef.current;\n        if (container) {\n            container.addEventListener('scroll', handleScroll, { passive: true });\n            return () => {\n                container.removeEventListener('scroll', handleScroll);\n            };\n        }\n    }, [containerRef, handleScroll]);\n    // 计算可见项目\n    const visibleItems = useMemo(() => {\n        const result = [];\n        let offset = 0;\n        for (let i = 0; i < items.length; i++) {\n            const item = items[i];\n            const measured = measuredItems.get(`${item.role}-${i}`);\n            const itemHeight = measured?.height || defaultHeight;\n            if (i >= visibleRange.startIndex && i < visibleRange.endIndex) {\n                result.push({\n                    item,\n                    index: i,\n                    offset,\n                    height: itemHeight,\n                });\n            }\n            offset += itemHeight;\n        }\n        return result;\n    }, [items, measuredItems, visibleRange, defaultHeight]);\n    // 滚动到指定项目\n    const scrollToIndex = useCallback((index) => {\n        if (containerRef.current) {\n            let offset = 0;\n            for (let i = 0; i < index && i < items.length; i++) {\n                const measured = measuredItems.get(`${items[i].role}-${i}`);\n                offset += measured?.height || defaultHeight;\n            }\n            containerRef.current.scrollTo({\n                top: offset,\n                behavior: 'smooth',\n            });\n        }\n    }, [containerRef, items, measuredItems, defaultHeight]);\n    // 滚动到底部\n    const scrollToBottom = useCallback(() => {\n        if (containerRef.current) {\n            containerRef.current.scrollTo({\n                top: totalHeight,\n                behavior: 'smooth',\n            });\n        }\n    }, [containerRef, totalHeight]);\n    return {\n        visibleItems,\n        totalHeight,\n        isScrolling,\n        measureItem,\n        scrollToIndex,\n        scrollToBottom,\n        scrollTop,\n    };\n};\n","import React, { useEffect, useState, useMemo, useCallback } from 'react';\n// 使用React.memo优化组件重渲染\nconst ChatInputComponent = ({ inputValue, onInputChange, onSubmit, onToggleQuestionPanel, onStopGeneration, isGenerating, isLoading, showQuestionPanel, inputRef, setupInputListeners, }) => {\n    // 检测是否为 PWA 模式\n    const [isPWA, setIsPWA] = useState(false);\n    // 检测是否为 iOS 设备\n    const [isIOS, setIsIOS] = useState(false);\n    // 检测是否为安卓设备\n    const [isAndroid, setIsAndroid] = useState(false);\n    // 安卓导航栏高度\n    const [androidNavBarHeight, setAndroidNavBarHeight] = useState(0);\n    // iOS 刘海区域高度\n    const [iosNotchHeight, setIosNotchHeight] = useState(0);\n    // 优化设备检测逻辑，使用useMemo缓存检测结果\n    const deviceInfo = useMemo(() => {\n        const isIOSDevice = /iPhone|iPad|iPod/i.test(navigator.userAgent);\n        const isAndroidDevice = /Android/i.test(navigator.userAgent);\n        const isStandalone = window.matchMedia('(display-mode: standalone)').matches ||\n            window.navigator.standalone ||\n            document.referrer.includes('android-app://');\n        return {\n            isIOSDevice,\n            isAndroidDevice,\n            isStandalone\n        };\n    }, []);\n    // 优化高度计算逻辑，使用useMemo缓存计算结果\n    const heights = useMemo(() => {\n        const getIosNotchHeight = () => {\n            if (!deviceInfo.isIOSDevice)\n                return 0;\n            const safeAreaTop = parseInt(getComputedStyle(document.documentElement)\n                .getPropertyValue('--safe-area-inset-top')) || 0;\n            // iOS 刘海区域通常在 20-44px 之间\n            return safeAreaTop > 0 ? Math.max(safeAreaTop, 20) : 0;\n        };\n        const getAndroidNavBarHeight = () => {\n            if (!deviceInfo.isAndroidDevice)\n                return 0;\n            const safeAreaBottom = parseInt(getComputedStyle(document.documentElement)\n                .getPropertyValue('--safe-area-inset-bottom')) || 0;\n            const androidNavBarHeight = parseInt(getComputedStyle(document.documentElement)\n                .getPropertyValue('--android-navigation-bar-height')) || 0;\n            return Math.max(safeAreaBottom, androidNavBarHeight);\n        };\n        return {\n            iosNotchHeight: getIosNotchHeight(),\n            androidNavBarHeight: getAndroidNavBarHeight()\n        };\n    }, [deviceInfo]);\n    // 优化事件处理函数，使用useCallback\n    const handleInputChange = useCallback((e) => {\n        onInputChange(e.target.value);\n    }, [onInputChange]);\n    const handleButtonClick = useCallback(() => {\n        if (isGenerating) {\n            onStopGeneration();\n        }\n        else if (inputValue.trim()) {\n            onSubmit(new Event('submit'));\n        }\n        else {\n            onToggleQuestionPanel();\n        }\n    }, [isGenerating, inputValue, onStopGeneration, onSubmit, onToggleQuestionPanel]);\n    // 优化设备检测和状态更新\n    useEffect(() => {\n        setIsPWA(deviceInfo.isStandalone);\n        setIsIOS(deviceInfo.isIOSDevice);\n        setIsAndroid(deviceInfo.isAndroidDevice);\n        setIosNotchHeight(heights.iosNotchHeight);\n        setAndroidNavBarHeight(heights.androidNavBarHeight);\n    }, [deviceInfo, heights]);\n    // 优化事件监听器设置\n    useEffect(() => {\n        // 监听显示模式变化\n        const mediaQuery = window.matchMedia('(display-mode: standalone)');\n        const handlePWAChange = () => setIsPWA(mediaQuery.matches);\n        mediaQuery.addEventListener('change', handlePWAChange);\n        // 监听CSS变量变化（导航栏高度可能会变化）\n        const observer = new MutationObserver(() => {\n            if (deviceInfo.isAndroidDevice) {\n                const safeAreaBottom = parseInt(getComputedStyle(document.documentElement)\n                    .getPropertyValue('--safe-area-inset-bottom')) || 0;\n                const androidNavBarHeight = parseInt(getComputedStyle(document.documentElement)\n                    .getPropertyValue('--android-navigation-bar-height')) || 0;\n                setAndroidNavBarHeight(Math.max(safeAreaBottom, androidNavBarHeight));\n            }\n        });\n        observer.observe(document.documentElement, {\n            attributes: true,\n            attributeFilter: ['style']\n        });\n        return () => {\n            mediaQuery.removeEventListener('change', handlePWAChange);\n            observer.disconnect();\n        };\n    }, [deviceInfo]);\n    // 设置输入框监听器\n    useEffect(() => {\n        if (inputRef.current) {\n            setupInputListeners(inputRef.current);\n        }\n    }, [inputRef, setupInputListeners]);\n    return (React.createElement(\"form\", { className: `chat-input chat-input-form ${isPWA ? 'pwa-mode' : ''} ${isIOS ? 'ios-mode' : ''} ${isAndroid ? 'android-mode' : ''}`, onSubmit: onSubmit },\n        React.createElement(\"input\", { ref: inputRef, type: \"text\", value: inputValue, onChange: handleInputChange, placeholder: \"\\u8F93\\u5165\\u60A8\\u7684\\u95EE\\u9898...\", disabled: isLoading, className: \"chat-input-field\" }),\n        React.createElement(\"button\", { type: isGenerating ? \"button\" : (inputValue.trim() ? \"submit\" : \"button\"), onClick: handleButtonClick, disabled: isLoading && !isGenerating, className: \"chat-action-button chat-send-button\" }, isGenerating ? (React.createElement(\"span\", { className: \"chat-stop-icon\" }, \"\\u25A0\")) : inputValue.trim() ? (React.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", width: \"24\", height: \"24\", viewBox: \"0 0 24 24\", fill: \"#ffffff\", stroke: \"#ffffff\", strokeWidth: \"2\", strokeLinecap: \"round\", strokeLinejoin: \"round\", className: \"chat-send-icon\" },\n            React.createElement(\"line\", { x1: \"22\", y1: \"2\", x2: \"11\", y2: \"13\" }),\n            React.createElement(\"polygon\", { points: \"22 2 15 22 11 13 2 9 22 2\" }))) : (React.createElement(\"span\", { className: \"chat-toggle-icon\" }, showQuestionPanel ? \"✕\" : \"+\")))));\n};\n// 使用React.memo优化组件重渲染\nconst ChatInput = React.memo(ChatInputComponent);\nexport default ChatInput;\n","import React, { useState, useEffect, useRef } from 'react';\nconst ModelSelector = ({ model, setModel, models }) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const containerRef = useRef(null);\n    const handleModelSelect = (selectedModel) => {\n        setModel(selectedModel);\n        setIsOpen(false);\n    };\n    useEffect(() => {\n        const handleClickOutside = (event) => {\n            if (containerRef.current && !containerRef.current.contains(event.target)) {\n                setIsOpen(false);\n            }\n        };\n        document.addEventListener('mousedown', handleClickOutside);\n        document.addEventListener('touchstart', handleClickOutside);\n        return () => {\n            document.removeEventListener('mousedown', handleClickOutside);\n            document.removeEventListener('touchstart', handleClickOutside);\n        };\n    }, []);\n    useEffect(() => {\n        if (isOpen) {\n            document.body.classList.add('model-selector-open');\n        }\n        else {\n            document.body.classList.remove('model-selector-open');\n        }\n        return () => {\n            document.body.classList.remove('model-selector-open');\n        };\n    }, [isOpen]);\n    return (React.createElement(\"div\", { className: \"model-selector-container\", ref: containerRef },\n        React.createElement(\"button\", { className: \"quick-action-button\", onClick: () => setIsOpen(!isOpen) },\n            React.createElement(\"svg\", { width: \"18\", height: \"18\", viewBox: \"0 0 24 24\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\" },\n                React.createElement(\"path\", { d: \"M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5\", stroke: \"currentColor\", strokeWidth: \"2\", strokeLinecap: \"round\", strokeLinejoin: \"round\" }))),\n        isOpen && (React.createElement(\"ul\", { className: \"model-selector-list\" }, models.map((m) => (React.createElement(\"li\", { key: m, onClick: () => handleModelSelect(m), className: model === m ? 'active' : '' }, m)))))));\n};\nexport default ModelSelector;\n","import React from 'react';\nimport ModelSelector from './ModelSelector';\nconst QuickActions = ({ quickActions, onQuickActionClick, isLoading, model, setModel, models, }) => {\n    return (React.createElement(\"div\", { className: \"quick-actions-container\" },\n        React.createElement(\"div\", { className: \"quick-actions\" },\n            React.createElement(ModelSelector, { model: model, setModel: setModel, models: models }),\n            quickActions.map((action) => (React.createElement(\"button\", { key: action.id, className: \"quick-action-button\", onClick: () => onQuickActionClick(action.name, action.prompt), disabled: isLoading }, action.name))))));\n};\nexport default QuickActions;\n","import React from 'react';\nconst QuestionPanel = ({ questionCategories, activeQuestionTab, onTabChange, onQuestionClick, showQuestionPanel, }) => {\n    if (!showQuestionPanel)\n        return null;\n    const activeCategory = questionCategories.find(c => c.name === activeQuestionTab);\n    return (React.createElement(\"div\", { className: \"question-panel\" },\n        React.createElement(\"div\", { className: \"question-tabs\" }, questionCategories.map((category) => (React.createElement(\"button\", { key: category.name, className: `tab-button question-tab-button ${activeQuestionTab === category.name ? \"active\" : \"\"}`, onClick: () => onTabChange(category.name) }, category.name)))),\n        React.createElement(\"div\", { className: \"question-content\" }, activeCategory?.subCategories.map((subCategory) => (React.createElement(\"div\", { key: subCategory.name, className: \"question-group\" },\n            React.createElement(\"h4\", { className: \"category-heading\" }, subCategory.name),\n            React.createElement(\"div\", { className: \"questions-wrapper\" }, subCategory.questions.map((question, index) => (React.createElement(\"p\", { key: index, onClick: () => onQuestionClick(question), className: \"question-text\" }, question))))))))));\n};\nexport default QuestionPanel;\n","import React from 'react';\nconst ScrollToBottomButton = ({ isVisible, onClick }) => {\n    if (!isVisible)\n        return null;\n    return (React.createElement(\"button\", { className: `scroll-to-bottom-button ${isVisible ? 'visible' : ''}`, onClick: onClick, \"aria-label\": \"\\u6EDA\\u52A8\\u5230\\u5E95\\u90E8\" },\n        React.createElement(\"svg\", { width: \"20\", height: \"20\", viewBox: \"0 0 24 24\", fill: \"none\", stroke: \"currentColor\", strokeWidth: \"2\", strokeLinecap: \"round\", strokeLinejoin: \"round\" },\n            React.createElement(\"polyline\", { points: \"6 9 12 15 18 9\" }))));\n};\nexport default React.memo(ScrollToBottomButton);\n","import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { useAIChat } from '../AIChatContext';\nimport { useMessageScroll } from '../hooks/useMessageScroll';\nimport { useVirtualKeyboard } from '../hooks/useVirtualKeyboard';\nimport { useAIChatService } from '../hooks/useAIChatService';\nimport { useChatLayout } from '../hooks/useChatLayout';\nimport MessageList from './MessageList';\nimport ChatInput from './ChatInput';\nimport QuickActions from './QuickActions';\nimport QuestionPanel from './QuestionPanel';\nimport SkeletonLoader from './SkeletonLoader';\nimport ScrollToBottomButton from './ScrollToBottomButton';\nimport '../../styles/chat/model-selector.css';\n// 使用React.memo优化组件重渲染\nconst ChatContainerComponent = ({ formData, astrolabe, synastryAstrolabe, isSynastryMode = false, personNames = { person1: \"第一个人\", person2: \"第二个人\" }, synastryData, isVisible = true, }) => {\n    const { activeSession, setMessages, isLoading, setIsLoading, updateLastMessage, updateSessionTitle, model, setModel, } = useAIChat();\n    const messages = useMemo(() => activeSession?.messages ?? [], [activeSession]);\n    // 本地状态管理\n    const [inputValue, setInputValue] = useState(\"\");\n    const [showQuestionPanel, setShowQuestionPanel] = useState(false);\n    const [isGenerating, setIsGenerating] = useState(false);\n    const [isStreaming, setIsStreaming] = useState(false);\n    const [generationFailed, setGenerationFailed] = useState(false);\n    const [lastFailedMessage, setLastFailedMessage] = useState(\"\");\n    const [activeQuestionTab, setActiveQuestionTab] = useState(\"感情\");\n    // 输入框引用\n    const inputRef = React.useRef(null);\n    // 懒加载数据\n    const [quickActionsData, setQuickActionsData] = useState([]);\n    const [synastryQuickActionsData, setSynastryQuickActionsData] = useState([]);\n    const [questionCategoriesData, setQuestionCategoriesData] = useState([]);\n    const [dataLoaded, setDataLoaded] = useState(false);\n    // 使用自定义 Hooks\n    const { messagesContainerRef, lastMessageRef, userScrolledUp, setUserScrolledUp, scrollToBottom, } = useMessageScroll(messages, isVisible, isStreaming);\n    const { keyboardState, setupInputListeners } = useVirtualKeyboard();\n    const { getContainerStyle, getMessagesContainerStyle, getInputContainerStyle } = useChatLayout();\n    // AI 聊天服务\n    const { sendMessage, regenerateResponse, stopGeneration } = useAIChatService({\n        formData,\n        astrolabe,\n        synastryAstrolabe,\n        isSynastryMode,\n        personNames,\n        synastryData,\n        onMessageUpdate: updateLastMessage,\n        onMessagesChange: setMessages,\n        onLoadingChange: setIsLoading,\n        onGeneratingChange: setIsGenerating,\n        onStreamingChange: setIsStreaming,\n        onError: (error, message) => {\n            setGenerationFailed(error);\n            if (message)\n                setLastFailedMessage(message);\n        },\n    });\n    // 自动为新会话生成标题\n    useEffect(() => {\n        if (activeSession &&\n            activeSession.title === '新的对话' &&\n            activeSession.messages.length >= 2 &&\n            activeSession.messages[0].role === 'user') {\n            // 使用第一个用户问题作为标题，并截断\n            const newTitle = activeSession.messages[0].content.substring(0, 20);\n            updateSessionTitle(activeSession.id, newTitle);\n        }\n    }, [activeSession, updateSessionTitle]);\n    // 懒加载数据\n    useEffect(() => {\n        const loadData = async () => {\n            try {\n                // 动态导入预设数据\n                const { quickActions, synastryQuickActions, questionCategories } = await import('../presets');\n                setQuickActionsData(quickActions);\n                setSynastryQuickActionsData(synastryQuickActions);\n                setQuestionCategoriesData(questionCategories);\n                setDataLoaded(true);\n            }\n            catch (error) {\n                console.error('加载数据失败:', error);\n                setDataLoaded(true); // 即使失败也设置为已加载，避免无限加载状态\n            }\n        };\n        loadData();\n    }, []);\n    // 处理虚拟键盘弹出时隐藏问题面板\n    useEffect(() => {\n        if (keyboardState.isVisible && showQuestionPanel) {\n            setShowQuestionPanel(false);\n        }\n    }, [keyboardState.isVisible, showQuestionPanel]);\n    // 使用useCallback优化事件处理函数\n    const handleSendMessage = useCallback(async (content) => {\n        if (!content.trim() || isLoading)\n            return;\n        const userMessage = { role: \"user\", content };\n        const updatedMessages = [...messages, userMessage];\n        setMessages(updatedMessages); // This now updates the active session\n        setInputValue(\"\");\n        setGenerationFailed(false);\n        setLastFailedMessage(content);\n        setShowQuestionPanel(false);\n        await sendMessage(userMessage, updatedMessages);\n    }, [isLoading, messages, sendMessage, setMessages]);\n    const handleQuickActionClick = useCallback(async (name, prompt) => {\n        if (!name.trim() || isLoading)\n            return;\n        const userMessage = { role: \"user\", content: name };\n        const updatedMessages = [...messages, userMessage];\n        setMessages(updatedMessages); // This now updates the active session\n        setInputValue(\"\");\n        setGenerationFailed(false);\n        setLastFailedMessage(name);\n        setShowQuestionPanel(false);\n        await sendMessage({ ...userMessage, content: prompt }, updatedMessages);\n    }, [isLoading, messages, sendMessage, setMessages]);\n    const handlePresetQuestionClick = useCallback((question) => {\n        handleSendMessage(question);\n    }, [handleSendMessage]);\n    const handleSubmit = useCallback((e) => {\n        e.preventDefault();\n        handleSendMessage(inputValue);\n    }, [handleSendMessage, inputValue]);\n    const toggleQuestionPanel = useCallback(() => {\n        setShowQuestionPanel(!showQuestionPanel);\n    }, [showQuestionPanel]);\n    const handleRegenerate = useCallback(async () => {\n        if (!lastFailedMessage.trim())\n            return;\n        setGenerationFailed(false);\n        await regenerateResponse(lastFailedMessage, messages);\n    }, [lastFailedMessage, messages, regenerateResponse]);\n    const handleMessagesClick = useCallback(() => {\n        if (showQuestionPanel) {\n            setShowQuestionPanel(false);\n        }\n    }, [showQuestionPanel]);\n    if (!isVisible) {\n        return null;\n    }\n    return (React.createElement(\"div\", { className: `ai-chat ${isVisible ? \"visible\" : \"hidden\"}` },\n        React.createElement(MessageList, { messages: messages, isLoading: isLoading, generationFailed: generationFailed, lastFailedMessage: lastFailedMessage, onRegenerate: handleRegenerate, messagesContainerRef: messagesContainerRef, lastMessageRef: lastMessageRef, isStreaming: isStreaming }),\n        React.createElement(\"div\", { className: \"chat-input-container\", onClick: (e) => e.stopPropagation() }, !dataLoaded ? (\n        // 数据加载时显示骨架屏\n        React.createElement(\"div\", { className: \"chat-skeleton-fallback\" },\n            React.createElement(SkeletonLoader, { type: \"input\", animate: true }))) : (React.createElement(React.Fragment, null,\n            React.createElement(QuickActions, { quickActions: isSynastryMode ? synastryQuickActionsData : quickActionsData, onQuickActionClick: handleQuickActionClick, isLoading: isLoading, model: model, setModel: setModel, models: [\"sydf/v1-250520\", \"qwen/qwen3-max\", \"ovo/deepseek-v3.1\", \"ovo/glm-4.5\", \"ovo/kimi-k2-0905\", \"ovo/gemini-2.5-pro\", \"ovo/gpt-oss-120\", \"ovo/llama-v4-maverick\"] }),\n            React.createElement(ChatInput, { inputValue: inputValue, onInputChange: setInputValue, onSubmit: handleSubmit, onToggleQuestionPanel: toggleQuestionPanel, onStopGeneration: stopGeneration, isGenerating: isGenerating, isLoading: isLoading, showQuestionPanel: showQuestionPanel, inputRef: inputRef, setupInputListeners: setupInputListeners }),\n            React.createElement(QuestionPanel, { questionCategories: questionCategoriesData, activeQuestionTab: activeQuestionTab, onTabChange: setActiveQuestionTab, onQuestionClick: handlePresetQuestionClick, showQuestionPanel: showQuestionPanel })))),\n        React.createElement(ScrollToBottomButton, { isVisible: userScrolledUp && (isStreaming || isLoading), onClick: () => {\n                scrollToBottom(true);\n                setUserScrolledUp(false);\n            } })));\n};\n// 使用React.memo优化组件重渲染\nconst ChatContainer = React.memo(ChatContainerComponent);\nexport default ChatContainer;\n"],"names":["type","count","animate","renderMessageSkeleton","className","renderChatSkeleton","Array","from","length","map","_","index","key","renderInputSkeleton","skeletons","i","push","renderSkeletons","isMobileDevice","test","navigator","userAgent","isAndroidDevice","getAndroidNavigationBarHeight","safeAreaBottom","getSafeAreaInset","screenHeight","window","screen","height","windowHeight","innerHeight","heightDiff","visualViewport","screenWidth","width","windowWidth","innerWidth","widthDiff","Math","abs","getLayoutConfig","isMobile","headerHeight","keyboardHeight","safeAreaTop","position","CSS","supports","value","getComputedStyle","document","documentElement","getPropertyValue","parseInt","getKeyboardHeight","config","isKeyboardVisible","viewportHeight","updateLayoutCSSVariables","root","style","setProperty","useVirtualKeyboard","keyboardState","setKeyboardState","useState","isVisible","useRef","isAndroid","navigationBarHeight","observerRef","updateKeyboardState","useCallback","prev","current","navHeight","handleViewportResize","func","delay","lastCall","args","now","Date","apply","throttle","navBarHeight","max","min","handleInputFocus","setTimeout","handleInputBlur","setupInputListeners","inputElement","addEventListener","removeEventListener","useEffect","ResizeObserver","timeoutId","clearTimeout","debounce","observe","disconnect","body","classList","add","remove","hideKeyboard","formatStars","stars","join","formatAstrolabeForAI","astrolabe","currentTime","gender","result","toLocaleString","year","month","day","hour","minute","second","hour12","solarDate","lunarDate","chineseDate","time","timeRange","sign","zodiac","earthlyBranchOfSoulPalace","earthlyBranchOfBodyPalace","soul","fiveElementsClass","palaces","forEach","palace","majorStars","star","name","minorStars","adjectiveStars","heavenlyStem","earthlyBranch","changsheng12","boshi12","jiangqian12","suiqian12","decadal","range","ages","isBodyPalace","isOriginalPalace","trim","formatPalace","horoscope","mutagen","age","nominalAge","yearly","monthly","daily","hourly","formatAstrolabeForSynastry","keyPalaces","includes","buildSystemPrompt","formData","synastryAstrolabe","isSynastryMode","personNames","synastryData","basePrompt","person1Gender","person1","synastryDataFormatted","person2","person1Data","processStreamChunk","chunk","buffer","onMessageUpdate","assistantMessage","newBuffer","lines","split","pop","line","startsWith","data","slice","endsWith","parsed","JSON","parse","choices","delta","content","newContent","e","useAIChatRequest","sendRequest","isLoading","error","clearCache","options","cacheKey","cacheTTL","maxRetries","retryDelay","retryBackoff","setIsLoading","setError","abortControllerRef","cacheRef","Map","isCacheValid","entry","timestamp","getFromCache","fullKey","get","setCache","set","keys","delete","ms","Promise","resolve","async","requestConfig","customCacheKey","url","cacheData","abort","AbortController","retryCount","currentRetryDelay","attemptRequest","fetchOptions","signal","stringify","headers","response","fetch","ok","Error","status","json","err","cancelRequest","useNetworkRequest","sendChatRequest","messages","model","temperature","stream","method","useAIChatService","onMessagesChange","onLoadingChange","onGeneratingChange","onStreamingChange","onError","isGenerating","setIsGenerating","isNetworkLoading","networkError","processStreamResponse","existingMessages","reader","getReader","decoder","TextDecoder","assistantMessageContent","done","read","decode","shouldUpdate","processRemainingBuffer","callAIService","handleError","userMessage","currentMessages","role","errorMessage","sendMessage","updatedMessages","aiMessages","systemPrompt","buildAIMessages","finalMessages","regenerateResponse","failedMessage","messagesWithoutLastAssistant","filter","msg","stopGeneration","useChatLayout","layoutConfig","setLayoutConfig","isInitialized","setIsInitialized","updateLayout","newConfig","updatedConfig","initializeLayout","handleResize","handleMobileLayout","handleDesktopLayout","observer","onLayoutChange","handleOrientationChange","currentIsMobile","getGridTemplateStyle","contains","gridTemplateRows","getContainerStyle","baseStyle","display","minHeight","overflow","top","left","right","bottom","getMessagesContainerStyle","overflowY","scrollSnapType","paddingTop","paddingBottom","marginTop","marginBottom","padding","getInputContainerStyle","flexShrink","backgroundColor","zIndex","borderTop","LazyImage","src","alt","props","isLoaded","setIsLoaded","isInView","setIsInView","imgRef","IntersectionObserver","isIntersecting","rootMargin","threshold","unobserve","ref","undefined","onLoad","processedContent","useMemo","replace","components","h1","children","h2","h3","h4","h5","h6","p","ul","ol","li","isTask","toArray","some","child","a","href","target","rel","code","inline","rest","match","exec","language","pre","blockquote","table","thead","tbody","tr","th","td","strong","em","hr","img","del","input","checked","readOnly","markdownContent","remarkPlugins","rehypePlugins","message","isLastMessage","showRegenerate","onRegenerate","messageRef","isStreaming","showActions","isUser","displayedContent","setDisplayedContent","hasStartedStreaming","setHasStartedStreaming","contentRef","handleCopy","clipboard","writeText","then","catch","handleShare","share","shareData","title","text","shouldShowActions","onClick","xmlns","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","x","y","rx","ry","cx","cy","r","x1","y1","x2","y2","generationFailed","lastFailedMessage","messagesContainerRef","lastMessageRef","useMessageStorage","useVirtualScroll","messageStorage","maxMessagesInMemory","pageSize","storageKey","allMessages","setAllMessages","visibleMessages","setVisibleMessages","currentPage","setCurrentPage","hasMore","setHasMore","loadMessagesFromStorage","storedMessages","localStorage","getItem","parsedMessages","isArray","every","saveMessagesToStorage","setItem","recentMessages","cleanupError","initialVisible","addMessages","newMessages","updated","trimmed","loadMoreMessages","nextPage","startIndex","endIndex","newVisibleMessages","clearMessages","removeItem","resetToLatest","latestMessages","storedVisibleMessages","isStorageLoading","displayMessages","virtualScroll","items","containerRef","itemHeight","overscan","defaultHeight","scrollTop","setScrollTop","containerHeight","setContainerHeight","measuredItems","setMeasuredItems","isScrolling","setIsScrolling","scrollTimeoutRef","totalHeight","item","measured","visibleRange","startOffset","currentOffset","measureItem","id","newMap","existing","offset","itemId","handleScroll","updateContainerHeight","clientHeight","container","passive","visibleItems","scrollToIndex","scrollTo","behavior","scrollToBottom","storedMsg","topObserverRef","entries","messageItems","originalIndex","indexOf","el","measuredHeight","getBoundingClientRect","SkeletonLoader","inputValue","onInputChange","onSubmit","onToggleQuestionPanel","onStopGeneration","showQuestionPanel","inputRef","isPWA","setIsPWA","isIOS","setIsIOS","setIsAndroid","androidNavBarHeight","setAndroidNavBarHeight","iosNotchHeight","setIosNotchHeight","deviceInfo","isIOSDevice","isStandalone","matchMedia","matches","standalone","referrer","heights","getIosNotchHeight","getAndroidNavBarHeight","handleInputChange","handleButtonClick","Event","mediaQuery","handlePWAChange","MutationObserver","attributes","attributeFilter","onChange","placeholder","disabled","points","setModel","models","isOpen","setIsOpen","handleClickOutside","event","m","quickActions","onQuickActionClick","action","prompt","questionCategories","activeQuestionTab","onTabChange","onQuestionClick","activeCategory","find","c","category","subCategories","subCategory","questions","question","activeSession","setMessages","updateLastMessage","updateSessionTitle","setInputValue","setShowQuestionPanel","setIsStreaming","setGenerationFailed","setLastFailedMessage","setActiveQuestionTab","quickActionsData","setQuickActionsData","synastryQuickActionsData","setSynastryQuickActionsData","questionCategoriesData","setQuestionCategoriesData","dataLoaded","setDataLoaded","userScrolledUp","setUserScrolledUp","isUserActivelyScrolling","setIsUserActivelyScrolling","userScrollTimeoutRef","isAtBottom","scrollHeight","force","requestAnimationFrame","atBottom","resetScrollState","useMessageScroll","newTitle","substring","synastryQuickActions","loadData","handleSendMessage","handleQuickActionClick","handlePresetQuestionClick","handleSubmit","preventDefault","toggleQuestionPanel","handleRegenerate","stopPropagation"],"sourceRoot":""}